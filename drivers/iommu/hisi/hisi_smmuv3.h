/*
 * Copyright (c) Hisilicon Technologies Co., Ltd. 2019-2019. All rights reserved.
 * Description: This is for smmuv3 driver.
 * Author: HISI_DRV1
 * Create: 2019-10-26
 */

#ifndef _HISI_SMMUV3_H
#define _HISI_SMMUV3_H

/*
 * Hisi fake mmu registers with 16 bytes.
 * Just for ACPU communication with AI CPU by gic.
 */
#define HISI_MMU_IDR0 0x0
#define HISI_MMU_IDR1 0x4

#define IDR1_ST_X0 0
#define IDR1_ST_X1 0x4

#define HISI_MMU_ADDR 0x8
#define HISI_MMU_SIZE 0xC

/* module base addr */
#ifndef CONFIG_HISI_SMMUV310
#define HISI_TOP_CTL_BASE 0
#define HISI_TCU_CACHE_BASE 0x1000
#define HISI_MASTER_0_BASE 0x10000
#define HISI_MASTER_1_BASE 0x14000
#define HISI_TCU_PG0_BASE 0x20000
#define HISI_TCU_PG1_BASE 0x30000
#define HISI_TCU_PG2_BASE 0x40000
#define HISI_TCU_PG3_BASE 0x50000
#define HISI_TBU_PG0_BASE 0x60000
#define HISI_TBU_PG1_BASE 0x70000
#else
#define HISI_TOP_CTL_BASE 0x30000
#define HISI_TCU_CACHE_BASE 0x31000
#define HISI_TCU_PG0_BASE 0x0
#endif
/* TCU CACHE reg */
#define TTW_OPT_FUNC_BYPASS HISI_TCU_CACHE_BASE
#define CACHELINE_INV_ALL (HISI_TCU_CACHE_BASE + 0x4)
#define CACHELINE_INV_ALL_FIELD BIT(0)

/* smmu master reg */
#define SMMU_MSTR_GLB_BYPASS 0
#define SMMU_MSTR_SID_BYPASS_VAL 3

#define SMMU_MSTR_SMRX_START_0 0x28
#define SMMU_MSTR_SMRX_START_1 0x2c
#define SMMU_MSTR_SMRX_START_2 0x30

#define SMMU_MSTR_INPT_SEL 0x28
#define END_REG_SEL BIT(1)
#define SMR_START_SEL BIT(0)

#define SMMU_MSTR_INTMASK 0x40
#define SMMU_MSTR_INTRAW 0x44
#define SMMU_MSTR_INTSTAT 0x48
#define SMMU_MSTR_INTCLR 0x4c
#define WDATA_BURST_CLR BIT(4)
#define WR_VA_ERR1_CLR BIT(3)
#define WR_VA_ERR0_CLR BIT(2)
#define RD_VA_ERR1_CLR BIT(1)
#define RD_VA_ERR0_CLR BIT(0)

#define SMMU_MSTR_SMRX_0(m) (0x4 * (m) + 0x100)
#define SSID_V_MASK_EN BIT(1)
#define MSTR_BYPASS BIT(0)
#define SMMU_MSTR_SMRX_1(m) (0x4 * (m) + 0x260)
#define SMMU_MSTR_SMRX_2(m) (0x4 * (m) + 0x3c0)
#define SMMU_MSTR_SMRX_3(m) (0x4 * (m) + 0x520)
#define SMMU_MSTR_END_ACK_0 0x1c
#define SMMU_MSTR_END_ACK_1 0x20

#ifndef CONFIG_HISI_SMMUV310
/* TBU reg */
#define SMMU_TBU_CR (HISI_TBU_PG0_BASE + 0)
#define TBU_EN_REQ BIT(0)

#define SMMU_TBU_CRACK (HISI_TBU_PG0_BASE + 0x4)
#define TBU_EN_ACK BIT(0)
#define TBU_CONNECTED BIT(1)
#else
#define TCU_CACHE_INV (1<<0)
#define TBU_IS_CONNECTED (1<<0)
#define TBU_MAX_NUM 13
#endif
/* TOP reg */
#define SMMU_LP_REQ (HISI_TOP_CTL_BASE + 0)
#define TCU_QREQN_CG BIT(0)
#define TCU_QREQN_PD BIT(1)

#define SMMU_LP_ACK (HISI_TOP_CTL_BASE + 0x4)
#define TCU_QACCEPTN_CG BIT(0)
#define TCU_QACCEPTN_PD BIT(4)

#define SMMU_TCU_SOFT_RST_STATE0     (HISI_TOP_CTL_BASE + 0x28)
#define SMMU_TCU_SOFT_RST_STATE1     (HISI_TOP_CTL_BASE + 0x2c)
#define SMMU_TBU_SOFT_RST_STATE0(n)  (HISI_TOP_CTL_BASE + 0x30 + (n) * 0x10)
#define SMMU_TBU_SOFT_RST_STATE1(n)  (HISI_TOP_CTL_BASE + 0x34 + (n) * 0x10)

#define SMMU_IRPT_MASK_NS (HISI_TOP_CTL_BASE + 0x70)
#define TCU_EVENT_TO_MASK BIT(5)
#define SMMU_IRPT_RAW_NS (HISI_TOP_CTL_BASE + 0x74)
#define SMMU_IRPT_STAT_NS (HISI_TOP_CTL_BASE + 0x78)
#define TCU_EVENT_Q_IRQ BIT(0)
#define TCU_CMD_SYNC_IRQ BIT(1)
#define TCU_GERROR_IRQ BIT(2)
#define SMMU_IRPT_CLR_NS (HISI_TOP_CTL_BASE + 0x7c)
#define TCU_EVENT_Q_IRQ_CLR BIT(0)
#define TCU_CMD_SYNC_IRQ_CLR BIT(1)
#define TCU_GERROR_IRQ_CLR BIT(2)
#define TCU_EVENTTO_CLR BIT(5)

#define SMMU_IRPT_MASK_S (HISI_TOP_CTL_BASE + 0x80)
#define SMMU_IRPT_RAW_S (HISI_TOP_CTL_BASE + 0x84)
#define SMMU_IRPT_STAT_S (HISI_TOP_CTL_BASE + 0x88)
#define SMMU_IRPT_CLR_S (HISI_TOP_CTL_BASE + 0x8c)
#ifdef CONFIG_HISI_SMMUV310
#define SMMU_TCU_CTRL_SCR (HISI_TOP_CTL_BASE + 0x90)
#define SMMU_TCU_CTRL_SCR_UARCH_NS (1<<0)
#endif
/* TCU registers */
#define ARM_SMMU_IDR0 (HISI_TCU_PG0_BASE + 0x0)
#define IDR0_ST_LVL_SHIFT 27
#define IDR0_ST_LVL_MASK 0x3
#define IDR0_ST_LVL_2LVL BIT(IDR0_ST_LVL_SHIFT)
#define IDR0_STALL_MODEL (3 << 24)
#define IDR0_TTENDIAN_SHIFT 21
#define IDR0_TTENDIAN_MASK 0x3
#define IDR0_TTENDIAN_LE (2 << IDR0_TTENDIAN_SHIFT)
#define IDR0_TTENDIAN_BE (3 << IDR0_TTENDIAN_SHIFT)
#define IDR0_TTENDIAN_MIXED (0 << IDR0_TTENDIAN_SHIFT)
#define IDR0_CD2L BIT(19)
#define IDR0_VMID16 BIT(18)
#define IDR0_PRI BIT(16)
#define IDR0_SEV BIT(14)
#define IDR0_MSI BIT(13)
#define IDR0_ASID16 BIT(12)
#define IDR0_ATS BIT(10)
#define IDR0_HYP BIT(9)
#define IDR0_COHACC BIT(4)
#define IDR0_TTF_SHIFT 2
#define IDR0_TTF_MASK 0x3
#define IDR0_TTF_AARCH64 (2 << IDR0_TTF_SHIFT)
#define IDR0_TTF_AARCH32_64 (3 << IDR0_TTF_SHIFT)
#define IDR0_S1P BIT(1)
#define IDR0_S2P BIT(0)

#define ARM_SMMU_IDR1 (HISI_TCU_PG0_BASE + 0x4)
#define IDR1_TABLES_PRESET BIT(30)
#define IDR1_QUEUES_PRESET BIT(29)
#define IDR1_REL BIT(28)
#define IDR1_CMDQ_SHIFT 21
#define IDR1_CMDQ_MASK 0x1f
#define IDR1_EVTQ_SHIFT 16
#define IDR1_EVTQ_MASK 0x1f
#define IDR1_PRIQ_SHIFT 11
#define IDR1_PRIQ_MASK 0x1f
#define IDR1_SSID_SHIFT 6
#define IDR1_SSID_MASK 0x1f
#define IDR1_SID_SHIFT 0
#define IDR1_SID_MASK 0x3f

#define ARM_SMMU_IDR2 (HISI_TCU_PG0_BASE + 0x4)
#define ARM_SMMU_IDR3 (HISI_TCU_PG0_BASE + 0x8)
#define ARM_SMMU_IDR4 (HISI_TCU_PG0_BASE + 0xc)
#define ARM_SMMU_IDR5 (HISI_TCU_PG0_BASE + 0x14)
#define IDR5_STALL_MAX_SHIFT 16
#define IDR5_STALL_MAX_MASK 0xffff
#define IDR5_GRAN64K BIT(6)
#define IDR5_GRAN16K BIT(5)
#define IDR5_GRAN4K BIT(4)
#define IDR5_OAS_SHIFT 0
#define IDR5_OAS_MASK 0x7
#define IDR5_OAS_32_BIT (0 << IDR5_OAS_SHIFT)
#define IDR5_OAS_36_BIT BIT(IDR5_OAS_SHIFT)
#define IDR5_OAS_40_BIT (2 << IDR5_OAS_SHIFT)
#define IDR5_OAS_42_BIT (3 << IDR5_OAS_SHIFT)
#define IDR5_OAS_44_BIT (4 << IDR5_OAS_SHIFT)
#define IDR5_OAS_48_BIT (5 << IDR5_OAS_SHIFT)

#define ARM_SMMU_IIDR (HISI_TCU_PG0_BASE + 0x18)
#define ARM_SMMU_AIDR (HISI_TCU_PG0_BASE + 0x1c)
#define ARM_SMMU_CR0 (HISI_TCU_PG0_BASE + 0x20)
#define CR0_CMDQEN BIT(3)
#define CR0_EVTQEN BIT(2)
#define CR0_PRIQEN BIT(1)
#define CR0_SMMUEN BIT(0)

#define ARM_SMMU_CR0ACK (HISI_TCU_PG0_BASE + 0x24)

#define ARM_SMMU_CR1 (HISI_TCU_PG0_BASE + 0x28)
#define CR1_SH_NSH 0
#define CR1_SH_OSH 2
#define CR1_SH_ISH 3
#define CR1_CACHE_NC 0
#define CR1_CACHE_WB 1
#define CR1_CACHE_WT 2
#define CR1_TABLE_SH_SHIFT 10
#define CR1_TABLE_OC_SHIFT 8
#define CR1_TABLE_IC_SHIFT 6
#define CR1_QUEUE_SH_SHIFT 4
#define CR1_QUEUE_OC_SHIFT 2
#define CR1_QUEUE_IC_SHIFT 0

#define ARM_SMMU_CR2 (HISI_TCU_PG0_BASE + 0x2c)
#define CR2_PTM BIT(2)
#define CR2_RECINVSID BIT(1)
#define CR2_E2H BIT(0)

#define ARM_SMMU_STATUS (HISI_TCU_PG0_BASE + 0x40)
#define ARM_SMMU_GBPA (HISI_TCU_PG0_BASE + 0x44)
#define ARM_SMMU_AGBPA (HISI_TCU_PG0_BASE + 0x48)
#define ARM_SMMU_IRQ_CTRL (HISI_TCU_PG0_BASE + 0x50)
#define IRQ_CTRL_EVTQ_IRQEN BIT(2)
#define IRQ_CTRL_PRIQ_IRQEN BIT(1)
#define IRQ_CTRL_GERROR_IRQEN BIT(0)

#define ARM_SMMU_IRQ_CTRLACK (HISI_TCU_PG0_BASE + 0x54)

#define ARM_SMMU_GERROR (HISI_TCU_PG0_BASE + 0x60)
#define GERROR_SFM_ERR BIT(8)
#define GERROR_MSI_GERROR_ABT_ERR BIT(7)
#define GERROR_MSI_PRIQ_ABT_ERR BIT(6)
#define GERROR_MSI_EVTQ_ABT_ERR BIT(5)
#define GERROR_MSI_CMDQ_ABT_ERR BIT(4)
#define GERROR_PRIQ_ABT_ERR BIT(3)
#define GERROR_EVTQ_ABT_ERR BIT(2)
#define GERROR_CMDQ_ERR BIT(0)
#define GERROR_ERR_MASK 0xfd

#define ARM_SMMU_GERRORN (HISI_TCU_PG0_BASE + 0x64)

#define ARM_SMMU_GERROR_IRQ_CFG0 (HISI_TCU_PG0_BASE + 0x68)
#define ARM_SMMU_GERROR_IRQ_CFG1 (HISI_TCU_PG0_BASE + 0x70)
#define ARM_SMMU_GERROR_IRQ_CFG2 (HISI_TCU_PG0_BASE + 0x74)

#define ARM_SMMU_STRTAB_BASE (HISI_TCU_PG0_BASE + 0x80)
#define STRTAB_BASE_RA BIT(62)
#define STRTAB_BASE_ADDR_SHIFT 6
#define STRTAB_BASE_ADDR_MASK 0x3ffffffffffUL

#define ARM_SMMU_STRTAB_BASE_CFG (HISI_TCU_PG0_BASE + 0x88)
#define STRTAB_BASE_CFG_LOG2SIZE_SHIFT 0
#define STRTAB_BASE_CFG_LOG2SIZE_MASK 0x3f
#define STRTAB_BASE_CFG_SPLIT_SHIFT 6
#define STRTAB_BASE_CFG_SPLIT_MASK 0x1f
#define STRTAB_BASE_CFG_FMT_SHIFT 16
#define STRTAB_BASE_CFG_FMT_MASK 0x3
#define STRTAB_BASE_CFG_FMT_LINEAR (0 << STRTAB_BASE_CFG_FMT_SHIFT)
#define STRTAB_BASE_CFG_FMT_2LVL BIT(STRTAB_BASE_CFG_FMT_SHIFT)

#define ARM_SMMU_CMDQ_BASE (HISI_TCU_PG0_BASE + 0x90)
#define ARM_SMMU_CMDQ_PROD (HISI_TCU_PG0_BASE + 0x98)
#define ARM_SMMU_CMDQ_CONS (HISI_TCU_PG0_BASE + 0x9c)

#define ARM_SMMU_EVTQ_BASE (HISI_TCU_PG0_BASE + 0xa0)
#define ARM_SMMU_EVTQ_PROD (HISI_TCU_PG0_BASE + 0x100a8)
#define ARM_SMMU_EVTQ_CONS (HISI_TCU_PG0_BASE + 0x100ac)
#define ARM_SMMU_EVTQ_IRQ_CFG0 (HISI_TCU_PG0_BASE + 0xb0)
#define ARM_SMMU_EVTQ_IRQ_CFG1 (HISI_TCU_PG0_BASE + 0xb8)
#define ARM_SMMU_EVTQ_IRQ_CFG2 (HISI_TCU_PG0_BASE + 0xbc)

#define ARM_SMMU_PRIQ_BASE (HISI_TCU_PG0_BASE + 0xc0)
#define ARM_SMMU_PRIQ_PROD (HISI_TCU_PG0_BASE + 0x100c8)
#define ARM_SMMU_PRIQ_CONS (HISI_TCU_PG0_BASE + 0x100cc)
#define ARM_SMMU_PRIQ_IRQ_CFG0 (HISI_TCU_PG0_BASE + 0xd0)
#define ARM_SMMU_PRIQ_IRQ_CFG1 (HISI_TCU_PG0_BASE + 0xd8)
#define ARM_SMMU_PRIQ_IRQ_CFG2 (HISI_TCU_PG0_BASE + 0xdc)
#ifdef CONFIG_HISI_SMMUV310
#define ARM_S_SMMU_TCU_SCR (HISI_TCU_PG0_BASE + 0x8e18)
#define ARM_S_SMMU_TCU_INIT (HISI_TCU_PG0_BASE + 0x803c)
#define SMMU_TCU_NODE_STATUS (HISI_TCU_PG0_BASE + 0x9400)
#define ARM_S_SMMU_TCU_SCR_NS 9
#endif
/* Common MSI config fields */
#define MSI_CFG0_ADDR_SHIFT 2
#define MSI_CFG0_ADDR_MASK 0x3fffffffffffUL
#define MSI_CFG2_SH_SHIFT 4
#define MSI_CFG2_SH_NSH (0UL << MSI_CFG2_SH_SHIFT)
#define MSI_CFG2_SH_OSH (2UL << MSI_CFG2_SH_SHIFT)
#define MSI_CFG2_SH_ISH (3UL << MSI_CFG2_SH_SHIFT)
#define MSI_CFG2_MEMATTR_SHIFT 0
#define MSI_CFG2_MEMATTR_DEVICE_NGNRE (0x1 << MSI_CFG2_MEMATTR_SHIFT)

#define Q_IDX(q, p) ((p) & ((1 << (q)->max_n_shift) - 1))
#define Q_WRP(q, p) ((p) & (1 << (q)->max_n_shift))
#define Q_OVERFLOW_FLAG BIT(31)
#define Q_OVF(q, p) ((p) & Q_OVERFLOW_FLAG)
#define Q_ENT(q, p) ((q)->base + Q_IDX(q, p) * (q)->ent_dwords)

#define Q_BASE_RWA BIT(62)
#define Q_BASE_ADDR_SHIFT 5
#define Q_BASE_ADDR_MASK 0xfffffffffffUL
#define Q_BASE_LOG2SIZE_SHIFT 0
#define Q_BASE_LOG2SIZE_MASK 0x1fUL

/*
 * Stream table.
 *
 * Linear: Enough to cover 1 << IDR1.SIDSIZE entries
 * 2lvl: 128k L1 entries,
 *       256 lazy entries per table (each table covers a PCI bus)
 */
#define STRTAB_L1_SZ_SHIFT 20
#define STRTAB_SPLIT 8

#define STRTAB_L1_DESC_DWORDS 1
#define STRTAB_L1_DESC_SPAN_SHIFT 0
#define STRTAB_L1_DESC_SPAN_MASK 0x1fUL
#define STRTAB_L1_DESC_L2PTR_SHIFT 6
#define STRTAB_L1_DESC_L2PTR_MASK 0x3ffffffffffUL

#define STRTAB_STE_DWORDS 8
#define STRTAB_STE_0_V BIT(0)
#define STRTAB_STE_0_CFG_SHIFT 1
#define STRTAB_STE_0_CFG_MASK 0x7UL
#define STRTAB_STE_0_CFG_ABORT (0UL << STRTAB_STE_0_CFG_SHIFT)
#define STRTAB_STE_0_CFG_BYPASS (4UL << STRTAB_STE_0_CFG_SHIFT)
#define STRTAB_STE_0_CFG_S1_TRANS (5UL << STRTAB_STE_0_CFG_SHIFT)
#define STRTAB_STE_0_CFG_S2_TRANS (6UL << STRTAB_STE_0_CFG_SHIFT)

#define STRTAB_STE_0_S1FMT_SHIFT 4
#define STRTAB_STE_0_S1FMT_LINEAR (0UL << STRTAB_STE_0_S1FMT_SHIFT)
#define STRTAB_STE_0_S1CTXPTR_SHIFT 6
#define STRTAB_STE_0_S1CTXPTR_MASK 0x3ffffffffffUL
#define STRTAB_STE_0_S1CDMAX_SHIFT 59
#define STRTAB_STE_0_S1CDMAX_MASK 0x1fUL

#define STRTAB_STE_1_S1C_CACHE_NC 0UL
#define STRTAB_STE_1_S1C_CACHE_WBRA 1UL
#define STRTAB_STE_1_S1C_CACHE_WT 2UL
#define STRTAB_STE_1_S1C_CACHE_WB 3UL
#define STRTAB_STE_1_S1C_SH_NSH 0UL
#define STRTAB_STE_1_S1C_SH_OSH 2UL
#define STRTAB_STE_1_S1C_SH_ISH 3UL
#define STRTAB_STE_1_S1CIR_SHIFT 2
#define STRTAB_STE_1_S1COR_SHIFT 4
#define STRTAB_STE_1_S1CSH_SHIFT 6

#define STRTAB_STE_1_S1STALLD BIT(27)

#define STRTAB_STE_1_EATS_ABT 0UL
#define STRTAB_STE_1_EATS_TRANS 1UL
#define STRTAB_STE_1_EATS_S1CHK 2UL
#define STRTAB_STE_1_EATS_SHIFT 28

#define STRTAB_STE_1_STRW_NSEL1 0UL
#define STRTAB_STE_1_STRW_EL2 2UL
#define STRTAB_STE_1_STRW_SHIFT 30

#define STRTAB_STE_2_S2VMID_SHIFT 0
#define STRTAB_STE_2_S2VMID_MASK 0xffffUL
#define STRTAB_STE_2_VTCR_SHIFT 32
#define STRTAB_STE_2_VTCR_MASK 0x7ffffUL
#define STRTAB_STE_2_S2AA64 BIT(51)
#define STRTAB_STE_2_S2ENDI BIT(52)
#define STRTAB_STE_2_S2PTW BIT(54)
#define STRTAB_STE_2_S2R BIT(58)

#define STRTAB_STE_3_S2TTB_SHIFT 4
#define STRTAB_STE_3_S2TTB_MASK 0xfffffffffffUL

/* Context descriptor (stage-1 only) */
#define CTXDESC_CD_DWORDS 8
#define CTXDESC_CD_0_TCR_T0SZ_SHIFT 0
#define ARM64_TCR_T0SZ_SHIFT 0
#define ARM64_TCR_T0SZ_MASK 0x1fUL
#define CTXDESC_CD_0_TCR_TG0_SHIFT 6
#define ARM64_TCR_TG0_SHIFT 14
#define ARM64_TCR_TG0_MASK 0x3UL
#define CTXDESC_CD_0_TCR_IRGN0_SHIFT 8
#define ARM64_TCR_IRGN0_SHIFT 8
#define ARM64_TCR_IRGN0_MASK 0x3UL
#define CTXDESC_CD_0_TCR_ORGN0_SHIFT 10
#define ARM64_TCR_ORGN0_SHIFT 10
#define ARM64_TCR_ORGN0_MASK 0x3UL
#define CTXDESC_CD_0_TCR_SH0_SHIFT 12
#define ARM64_TCR_SH0_SHIFT 12
#define ARM64_TCR_SH0_MASK 0x3UL
#define CTXDESC_CD_0_TCR_EPD0_SHIFT 14
#define ARM64_TCR_EPD0_SHIFT 7
#define ARM64_TCR_EPD0_MASK 0x1UL
#define CTXDESC_CD_0_TCR_EPD1_SHIFT 30
#define ARM64_TCR_EPD1_SHIFT 23
#define ARM64_TCR_EPD1_MASK 0x1UL

#define CTXDESC_CD_0_ENDI BIT(15)
#define CTXDESC_CD_0_V BIT(31)
#define ARM_SMMU_MAX_ASIDS BIT(16)
#define ARM_SMMU_MAX_SIDS 0xff
#define CTXDESC_CD_MAX_SSIDS BIT(4)

#define CTXDESC_CD_0_TCR_IPS_SHIFT 32
#define ARM64_TCR_IPS_SHIFT 32
#define ARM64_TCR_IPS_MASK 0x7UL
#define CTXDESC_CD_0_TCR_TBI0_SHIFT 38
#define ARM64_TCR_TBI0_SHIFT 37
#define ARM64_TCR_TBI0_MASK 0x1UL

#define CTXDESC_CD_0_AA64 BIT(41)
#define CTXDESC_CD_0_S BIT(44)
#define CTXDESC_CD_0_R BIT(45)
#define CTXDESC_CD_0_A BIT(46)
#define CTXDESC_CD_0_ASET_SHIFT 47
#define CTXDESC_CD_0_ASET_SHARED (0UL << CTXDESC_CD_0_ASET_SHIFT)
#define CTXDESC_CD_0_ASET_PRIVATE BIT(CTXDESC_CD_0_ASET_SHIFT)
#define CTXDESC_CD_0_ASID_SHIFT 48
#define CTXDESC_CD_0_ASID_MASK 0xffffUL

#define CTXDESC_CD_1_TTB0_SHIFT 4
#define CTXDESC_CD_1_TTB0_MASK 0xfffffffffffUL
#define CTXDESC_CD_1_TTB0_OFFSET 1

#define CTXDESC_CD_3_MAIR_SHIFT 0
#define CTXDESC_CD_3_MAIR_OFFSET 3

/* Convert between AArch64 (CPU) TCR format and SMMU CD format */
#define ARM_SMMU_TCR2CD(tcr, fld)                                              \
	(((tcr) >> ARM64_TCR_##fld##_SHIFT & ARM64_TCR_##fld##_MASK)           \
	 << CTXDESC_CD_0_TCR_##fld##_SHIFT)

/* Command queue */
#define CMDQ_ENT_DWORDS 2
#define CMDQ_MAX_SZ_SHIFT 8

#define CMDQ_ERR_SHIFT 24
#define CMDQ_ERR_MASK 0x7f
#define CMDQ_ERR_CERROR_NONE_IDX 0
#define CMDQ_ERR_CERROR_ILL_IDX 1
#define CMDQ_ERR_CERROR_ABT_IDX 2

#define CMDQ_0_OP_SHIFT 0
#define CMDQ_0_OP_MASK 0xffUL
#define CMDQ_0_SSV BIT(11)

#define CMDQ_PREFETCH_0_SID_SHIFT 32
#define CMDQ_PREFETCH_1_SIZE_SHIFT 0
#define CMDQ_PREFETCH_1_ADDR_MASK ~0xfffUL

#define CMDQ_CFGI_0_CD_SHIFT 12
#define CMDQ_CFGI_0_CD_MASK 0xfffff000UL
#define CMDQ_CFGI_0_SID_SHIFT 32
#define CMDQ_CFGI_0_SID_MASK 0xffffffffUL
#define CMDQ_CFGI_1_LEAF BIT(0)
#define CMDQ_CFGI_1_RANGE_SHIFT 0
#define CMDQ_CFGI_1_RANGE_MASK 0x1fUL

#define CMDQ_TLBI_0_VMID_SHIFT 32
#define CMDQ_TLBI_0_ASID_SHIFT 48
#define CMDQ_TLBI_1_LEAF BIT(0)
#define CMDQ_TLBI_1_VA_MASK ~0xfffUL
#define CMDQ_TLBI_1_IPA_MASK 0xfffffffff000UL

#define CMDQ_PRI_0_SSID_SHIFT 12
#define CMDQ_PRI_0_SSID_MASK 0xfffffUL
#define CMDQ_PRI_0_SID_SHIFT 32
#define CMDQ_PRI_0_SID_MASK 0xffffffffUL
#define CMDQ_PRI_1_GRPID_SHIFT 0
#define CMDQ_PRI_1_GRPID_MASK 0x1ffUL
#define CMDQ_PRI_1_RESP_SHIFT 12
#define CMDQ_PRI_1_RESP_DENY (0UL << CMDQ_PRI_1_RESP_SHIFT)
#define CMDQ_PRI_1_RESP_FAIL BIT(CMDQ_PRI_1_RESP_SHIFT)
#define CMDQ_PRI_1_RESP_SUCC (2UL << CMDQ_PRI_1_RESP_SHIFT)

#define CMDQ_SYNC_0_CS_SHIFT 12
#define CMDQ_SYNC_0_CS_NONE (0UL << CMDQ_SYNC_0_CS_SHIFT)
#define CMDQ_SYNC_0_CS_SEV (2UL << CMDQ_SYNC_0_CS_SHIFT)

/* Event queue */
#define EVTQ_ENT_DWORDS 4
#define EVTQ_MAX_SZ_SHIFT 7

#define EVTQ_0_ID_SHIFT 0
#define EVTQ_0_ID_MASK 0xffUL

#define EVTQ_TYPE_TRANSL_FORBIDDEN 0x07
#define EVTQ_TYPE_WALK_EABT 0x0b
#define EVTQ_TYPE_TRANSLATION 0x10
#define EVTQ_TYPE_ADDR_SIZE 0x11
#define EVTQ_TYPE_ACCESS 0x12
#define EVTQ_TYPE_PERMISSION 0x13

/* PRI queue */
#define PRIQ_ENT_DWORDS 2
#define PRIQ_MAX_SZ_SHIFT 8

#define PRIQ_0_SID_SHIFT 0
#define PRIQ_0_SID_MASK 0xffffffffUL
#define PRIQ_0_SSID_SHIFT 32
#define PRIQ_0_SSID_MASK 0xfffffUL
#define PRIQ_0_OF BIT(57)
#define PRIQ_0_PERM_PRIV BIT(58)
#define PRIQ_0_PERM_EXEC BIT(59)
#define PRIQ_0_PERM_READ BIT(60)
#define PRIQ_0_PERM_WRITE BIT(61)
#define PRIQ_0_PRG_LAST BIT(62)
#define PRIQ_0_SSID_V BIT(63)

#define PRIQ_1_PRG_IDX_SHIFT 0
#define PRIQ_1_PRG_IDX_MASK 0x1ffUL
#define PRIQ_1_ADDR_SHIFT 12
#define PRIQ_1_ADDR_MASK 0xfffffffffffffUL

/* High-level queue structures */
#define ARM_SMMU_POLL_TIMEOUT_US 1000

#define CMDQ_OP_PREFETCH_CFG 0x1
#define CMDQ_OP_CFGI_STE 0x3
#define CMDQ_OP_CFGI_STE_RANGE 0x4
#define CMDQ_OP_CFGI_ALL CMDQ_OP_CFGI_STE_RANGE
#define CMDQ_OP_CFGI_CD 0x5
#define CMDQ_OP_CFGI_CD_ALL 0x6
#define CMDQ_OP_TLBI_NH_ASID 0x11
#define CMDQ_OP_TLBI_NH_VA 0x12
#define CMDQ_OP_TLBI_EL2_ALL 0x20
#define CMDQ_OP_TLBI_S12_VMALL 0x28
#define CMDQ_OP_TLBI_S2_IPA 0x2a
#define CMDQ_OP_TLBI_NSNH_ALL 0x30
#define CMDQ_OP_RESUME 0x44
#define CMDQ_OP_STALL_TERM 0x45
#define CMDQ_OP_CMD_SYNC 0x46

#define HISI_SMMU_INVALID_SID 0xff
#define HISI_VAL_MASK 0xffffffff
#define MAX_CHECK_TIMES 100
#define HISI_SID_MAX_BITS 6
#define HISI_SSID_MAX_BITS 6
#define HISI_SMMU_ADDR_SIZE_32 32
#define HISI_SMMU_ADDR_SIZE_36 36
#define HISI_SMMU_ADDR_SIZE_40 40
#define HISI_SMMU_ADDR_SIZE_42 42
#define HISI_SMMU_ADDR_SIZE_44 44
#define HISI_SMMU_ADDR_SIZE_48 48
#define HISI_SMMU_ID_SIZE_8 8
#define HISI_SMMU_ID_SIZE_16 16
/* diff platform may have diff default value */
#define SMMU_MSTR_END_DEFAULT_AI_0 0x1ffff
#define SMMU_MSTR_END_DEFAULT_SDMA_0 0x1ff01ff
#define SMMU_MSTR_END_DEFAULT_AI_1 0x1ffff
#define SMMU_MSTR_END_DEFAULT_SDMA_1 0
#define DWORD_BYTES_NUM 3
#endif
