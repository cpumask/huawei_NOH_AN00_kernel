#ifndef HISI_SOC_ITS_PARA_H_
#define HISI_SOC_ITS_PARA_H_ 
#include <soc_acpu_baseaddr_interface.h>
#define L_COEFFICIENT_SIZE 40
#define B_M_COEFFICIENT_SIZE 50
#define B_M_CLUSTER_NUM 2
#define VOTE_RESULT_ADDR 0x2DC
#define C0_BIT 8
#define C1_BIT 24
#define C2_BIT 0
#define CORE_NUMBER 8
#define C0_CORE_NUM 4
#define C1_CORE_NUM 3
#define C2_CORE_NUM 1
#define FREQIDX_UPPER_BOUND 17
#define ITS_OLD_FREQ_IDX_START 48
#define ITS_NEW_FREQ_IDX_START 32
#define ITS_USER_ID_START 16
#define ITS_CORE_INDEX_START 0
#define ITS_OLD_FREQ_START 32
#define ITS_NEW_FREQ_START 0
enum {
 USERID_DUBAI = 0,
 USERID_MAX,
};
enum {
 CLUSTER_0 = 0,
 CLUSTER_1,
 CLUSTER_2,
 CLUSTER_NUMBER,
 CLUSTER_GPU
};
struct core_parameters {
 unsigned int addr;
 unsigned int cluster_idx;
};
typedef struct {
 unsigned long long power[CORE_NUMBER];
} its_cpu_power_t;
static struct core_parameters g_its_core_para[CORE_NUMBER] = {
 {SOC_ACPU_FCM_CORE0_ITS_CFG_BASE_ADDR, CLUSTER_0},
 {SOC_ACPU_FCM_CORE1_ITS_CFG_BASE_ADDR, CLUSTER_0},
 {SOC_ACPU_FCM_CORE2_ITS_CFG_BASE_ADDR, CLUSTER_0},
 {SOC_ACPU_FCM_CORE3_ITS_CFG_BASE_ADDR, CLUSTER_0},
 {SOC_ACPU_FCM_CORE4_ITS_CFG_BASE_ADDR, CLUSTER_1},
 {SOC_ACPU_FCM_CORE5_ITS_CFG_BASE_ADDR, CLUSTER_1},
 {SOC_ACPU_FCM_CORE6_ITS_CFG_BASE_ADDR, CLUSTER_1},
 {SOC_ACPU_FCM_CORE7_ITS_CFG_BASE_ADDR, CLUSTER_2}
};
static unsigned int g_l_cluster_para[L_COEFFICIENT_SIZE] = {
 0x0, 0x120E2A80, 0x19C, 0x231D02F6, 0x6380364,
 0x22652690, 0x4880000, 0x0, 0x217B22BC, 0x0,
 0x230901A7, 0x12252331, 0x1FF6, 0x7E0000, 0x6E,
 0x4FE0000, 0x860000, 0x0, 0x145D, 0x28A40000,
 0x90D0000, 0x1102, 0x0, 0x0, 0x0,
 0x0, 0xA50, 0x20530000, 0x0, 0x28B40364,
 0x1B800B3, 0x0, 0x17A800B0, 0x6940F3E, 0x9FA,
 0x0, 0x0, 0x0, 0x0, 0x0
};
static unsigned int g_bm_cluster_para[B_M_CLUSTER_NUM][B_M_COEFFICIENT_SIZE] = {
 {
  0x21B21BA, 0x104004A, 0x15021C3, 0x7AC0000, 0x620026,
  0x6011C, 0x282029, 0x20280000, 0x2F0086, 0x4882008,
  0x200D0753, 0x89A0250, 0x27BB2052, 0x8DF2124, 0x206C05BA,
  0x229E026C, 0x7E0000, 0x8EE0149, 0x3AC0032, 0x420215D,
  0x1F820F1, 0x2F10663, 0x22630457, 0x2047001A, 0x1FFF204E,
  0x22DB00A8, 0x1AA01C5, 0x5700A7, 0x22710143, 0x67209F6,
  0x20E106CC, 0x20340000, 0x3B01E8, 0x1C601B9, 0x21A10277,
  0x3F2062, 0x2C6026C, 0xB021D5, 0x2232224D, 0x16F0ED7,
  0x47B0000, 0x3C02511, 0x9207F, 0x20B0F34, 0x20D70276,
  0x288720DB, 0x11021D3, 0x20B30000, 0x2F420FD, 0x560
 },
 {
  0x1E0124, 0x3A122D1, 0xDF0092, 0x5640000, 0x812002,
  0x6500AF, 0x161E0014, 0x3D0000, 0xF900EC, 0x13D05AF,
  0x20030916, 0x19E, 0x291D2011, 0x21A9, 0xED0000,
  0x230B01F8, 0x7960000, 0x119E268C, 0x354006B, 0x7AF00FA,
  0x20F6217C, 0x4407D7, 0x8B0270, 0x4092001, 0xFA90099,
  0x217B00E9, 0x35326C1, 0x512118, 0x21CC003A, 0x5EA0000,
  0x1C20051, 0x8A0000, 0xF50043, 0x20732014, 0x20DE04FF,
  0x812016, 0x29C02B0, 0x23B21EB, 0x16022E9, 0x203A1359,
  0x2CA0000, 0x4E2361, 0x23450173, 0x2531E2E, 0x20DE05D0,
  0x25B7232A, 0x2FA0346, 0x26560000, 0x8BB00C7, 0xD0
 }
};
static unsigned int g_its_window_num[CLUSTER_NUMBER][FREQIDX_UPPER_BOUND] = {
 {
  0x21B1,
  0x29BF,
  0x3289,
  0x4362,
  0x493E,
  0x4F1A,
  0x566D,
  0x5DC0,
  0x6513,
  0x6C66,
  0x73B9,
  0x7A50,
  0x81A3,
  0x88F6,
  0x9049,
  0x9625,
  0x9C01
 },
 {
  0x3EFD,
  0x47C7,
  0x5091,
  0x595B,
  0x6225,
  0x6AEF,
  0x73B9,
  0x7DFA,
  0x86C4,
  0x8F8E,
  0x979C,
  0x9FAB,
  0xA7B9,
  0xACDA,
  0xB2B6,
  0xBC3B,
  0xC217,
 },
 {
  0x6AEF,
  0x80E8,
  0x8A6D,
  0x93F3,
  0x9CBD,
  0xA587,
  0xAE51,
  0xB71B,
  0xBFE5,
  0xC8AF,
  0xD234,
  0xDAFE,
  0xE53F,
  0xEEC5,
  0x0,
  0x0,
  0x0
 }
};
#endif
