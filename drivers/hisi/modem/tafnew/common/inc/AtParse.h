/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2012-2019. All rights reserved.
 * foss@huawei.com
 *
 * If distributed as part of the Linux kernel, the following license terms
 * apply:
 *
 * * This program is free software; you can redistribute it and/or modify
 * * it under the terms of the GNU General Public License version 2 and
 * * only version 2 as published by the Free Software Foundation.
 * *
 * * This program is distributed in the hope that it will be useful,
 * * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * * GNU General Public License for more details.
 * *
 * * You should have received a copy of the GNU General Public License
 * * along with this program; if not, write to the Free Software
 * * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA
 *
 * Otherwise, the following license terms apply:
 *
 * * Redistribution and use in source and binary forms, with or without
 * * modification, are permitted provided that the following conditions
 * * are met:
 * * 1) Redistributions of source code must retain the above copyright
 * *    notice, this list of conditions and the following disclaimer.
 * * 2) Redistributions in binary form must reproduce the above copyright
 * *    notice, this list of conditions and the following disclaimer in the
 * *    documentation and/or other materials provided with the distribution.
 * * 3) Neither the name of Huawei nor the names of its contributors may
 * *    be used to endorse or promote products derived from this software
 * *    without specific prior written permission.
 *
 * * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 */

#ifndef __ATPARSE_H__
#define __ATPARSE_H__

#include "hi_list.h"
#include "msp_at.h"
#include "AtParseCmd.h"
#include "mn_client.h"
#include "product_config.h"

#ifdef __cplusplus
#if __cplusplus
extern "C" {
#endif
#endif

#ifdef WIN32
#pragma warning(disable : 4200) /* zero-sized array in struct/union */
#endif

#pragma pack(push, 4)

#define AT_CMD_MAX_LEN 5000
#define AT_CMD_PADDING_LEN 20
#define AT_PLMN_MCC_MNC_LEN 6
#define AT_SEND_CRLF_ADDR_MAX_LEN (AT_CMD_MAX_LEN + 20 - 1)
#define AT_SEND_CODE_ADDR_MAX_LEN (AT_CMD_MAX_LEN + 20 - 3)
/* 所有支持AT命令的通道MODEM限制最小为1500BYTE, VCOM通道限制为4K, 其他通道由DMS模块限制为5120字节, 此处按最小的MODEM限制 */
#define AT_CMD_OUTPUT_MAX_LEN 1500

#define AT_CMD_ECONF_DIAL_MAX_PARA_NUM 11
#define AT_CMD_ECONF_DIAL_MIN_PARA_NUM 7

#define AT_CMD_ECKMC_MAX_KMC_LENGTH 96
#define AT_CMD_ECKMC_MAX_VERSION 255
#define AT_CMD_ECCALL_MAX_NUM_LENGTH 11

#define AT_CMD_MAX_ANT_BIT_MASK 0x3 /* 目前是双天线，bitMask为0x30011 */

#define AT_CMD_MCCFREQ_BS_MAX_LENGTH 500
#define AT_CMD_BLOCK_CELL_BS_MAX_LENGTH 500
#define AT_CMD_CLOUDDATA_BS_MAX_LENGTH 500

#define AT_CMD_COMM_BOOSTER_BS_MAX_LENGTH 500

#if (FEATURE_AT_CMD_TRUST_LIST == FEATURE_ON)
#define AT_CMD_KEY_WORD_MAX_LEN           100 /* at命令关键字最大长度 */
#define AT_CMD_KEY_WORD_LEN_ERR           0   /* at命令关键字长度为0 */
#endif

#define AT_CMD_PARA_INDEX_ONE 1
#define AT_CMD_PARA_LEN_ONE 1

/*
 * 协议表格:
 * ASN.1描述:
 * 结构说明: 十进制数字记录日期的所有成员，
 *           包括完整的年份，月份，日期，小时，分钟，秒钟
 *           单位分别为年，月，日，小时，分钟，秒
 */
typedef struct {
    TAF_UINT32 year;
    TAF_UINT32 month;
    TAF_UINT32 day;
    TAF_UINT32 hour;
    TAF_UINT32 munite;
    TAF_UINT32 second;
} AT_DATE;

enum AT_RreturnCode {
    AT_SUCCESS = 0,
    AT_FAILURE,
    AT_WAIT_SMS_INPUT,
    AT_WAIT_XML_INPUT,
    AT_WAIT_UE_POLICY_INPUT,
    AT_WAIT_IMSA_URSP_INPUT,
    AT_WAIT_ASYNC_RETURN,

    AT_BASIC_CODE_ENUM_BEGAIN, /* BASIC CODE 开始 */
    AT_OK,
    AT_CONNECT,
    AT_RING,
    AT_NO_CARRIER,
    AT_ERROR,
    AT_NO_DIALTONE,
    AT_BUSY,
    AT_NO_ANSWER,
    AT_BASIC_CODE_ENUM_END, /* BASIC CODE 结束 */

    AT_CME_ERROR_ENUM_BEGAIN, /* CME ERROR 开始 */

    AT_CME_PHONE_FAILURE,
    AT_CME_NO_CONNECTION_TO_PHONE,
    AT_CME_PHONE_ADAPTOR_LINK_RESERVED,
    AT_CME_OPERATION_NOT_ALLOWED,
    AT_CME_OPERATION_NOT_SUPPORTED,
    AT_CME_PH_SIM_PIN_REQUIRED,
    AT_CME_PH_FSIM_PIN_REQUIRED,
    AT_CME_PH_FSIM_PUK_REQUIRED,
    AT_CME_SIM_NOT_INSERTED,
    AT_CME_SIM_PIN_REQUIRED,
    AT_CME_SIM_PUK_REQUIRED,
    AT_CME_SIM_FAILURE,
    AT_CME_SIM_BUSY,
    AT_CME_SIM_WRONG,
    AT_CME_INCORRECT_PASSWORD,
    AT_CME_SIM_PIN2_REQUIRED,
    AT_CME_SIM_PUK2_REQUIRED,
    AT_CME_MEMORY_FULL,
    AT_CME_INVALID_INDEX,
    AT_CME_NOT_FOUND,
    AT_CME_MEMORY_FAILURE,
    AT_CME_TEXT_STRING_TOO_LONG,
    AT_CME_INVALID_CHARACTERS_IN_TEXT_STRING,
    AT_CME_DIAL_STRING_TOO_LONG,
    AT_CME_INVALID_CHARACTERS_IN_DIAL_STRING,

    AT_CME_SPN_FILE_CONTENT_ERROR,
    AT_CME_SPN_FILE_QUERY_REJECT,
    AT_CME_SPN_FILE_NOT_EXISTS,

    AT_CME_NO_NETWORK_SERVICE,
    AT_CME_NETWORK_TIMEOUT,
    AT_CME_NETWORK_NOT_ALLOWED_EMERGENCY_CALLS_ONLY,
    AT_CME_NETWORK_PERSONALIZATION_PIN_REQUIRED,
    AT_CME_NETWORK_PERSONALIZATION_PUK_REQUIRED,
    AT_CME_NETWORK_SUBSET_PERSONALIZATION_PIN_REQUIRED,
    AT_CME_NETWORK_SUBSET_PERSONALIZATION_PUK_REQUIRED,
    AT_CME_SERVICE_PROVIDER_PERSONALIZATION_PIN_REQUIRED,
    AT_CME_SERVICE_PROVIDER_PERSONALIZATION_PUK_REQUIRED,
    AT_CME_CORPORATE_PERSONALIZATION_PIN_REQUIRED,
    AT_CME_CORPORATE_PERSONALIZATION_PUK_REQUIRED,
    AT_CME_HIDDEN_KEY_REQUIRED,
    AT_CME_EAP_METHOD_NOT_SUPPORTED,
    AT_CME_INCORRECT_PARAMETERS,
    AT_CME_RX_DIV_NOT_SUPPORTED,
    AT_CME_RX_DIV_OTHER_ERR,
    AT_CME_UNKNOWN,

    AT_CME_ILLEGAL_MS,
    AT_CME_ILLEGAL_ME,
    AT_CME_GPRS_SERVICES_NOT_ALLOWED,
    AT_CME_PLMN_NOT_ALLOWED,
    AT_CME_LOCATION_AREA_NOT_ALLOWED,
    AT_CME_ROAMING_NOT_ALLOWED_IN_THIS_LOCATION_AREA,

    AT_CME_SERVICE_OPTION_NOT_SUPPORTED,
    AT_CME_REQUESTED_SERVICE_OPTION_NOT_SUBSCRIBED,
    AT_CME_SERVICE_OPTION_TEMPORARILY_OUT_OF_ORDER,
    AT_CME_PDP_AUTHENTICATION_FAILURE,

    AT_CME_INVALID_MOBILE_CLASS,
    AT_CME_UNSPECIFIED_GPRS_ERROR,

    AT_CME_VBS_VGCS_NOT_SUPPORTED_BY_THE_NETWORK,
    AT_CME_NO_SERVICE_SUBSCRIPTION_ON_SIM,
    AT_CME_NO_SUBSCRIPTION_FOR_GROUP_ID,
    AT_CME_GROUP_ID_NOT_ACTIVATED_ON_SIM,
    AT_CME_NO_MATCHING_NOTIFICATION,
    AT_CME_VBS_VGCS_CALL_ALREADY_PRESENT,
    AT_CME_CONGESTION,
    AT_CME_NETWORK_FAILURE,
    AT_CME_UPLINK_BUSY,
    AT_CME_NO_ACCESS_RIGHTS_FOR_SIM_FILE,
    AT_CME_NO_SUBSCRIPTION_FOR_PRIORITY,
    AT_CME_OPERATION_NOT_APPLICABLE_OR_NOT_POSSIBLE,
    AT_CME_FILE_NOT_EXISTS,

    AT_CME_SERVICE_NOT_PROVISIONED,

    AT_CME_PDP_ACT_LIMIT,
    AT_CME_NET_SEL_MENU_DISABLE,

    AT_CME_CS_IMS_SERV_EXIST,

    AT_CME_FDN_FAILED,
    AT_CME_CALL_CONTROL_FAILED,
    AT_CME_CALL_CONTROL_BEYOND_CAPABILITY,

    AT_CME_NO_RF,

    AT_CME_APN_LEN_ILLEGAL,
    AT_CME_APN_SYNTACTICAL_ERROR,
    AT_CME_SET_APN_BEFORE_SET_AUTH,
    AT_CME_AUTH_TYPE_ILLEGAL,
    AT_CME_USER_NAME_TOO_LONG,
    AT_CME_USER_PASSWORD_TOO_LONG,
    AT_CME_ACCESS_NUM_TOO_LONG,
    AT_CME_CALL_CID_IN_OPERATION,
    AT_CME_BEARER_TYPE_NOT_DEFAULT,
    AT_CME_CALL_CID_INVALID,
    AT_CME_CALL_CID_ACTIVE,
    AT_CME_BEARER_TYPE_ILLEGAL,
    AT_CME_MUST_EXIST_DEFAULT_TYPE_CID,
    AT_CME_PDN_TYPE_ILLEGAL,
    AT_CME_IPV4_ADDR_ALLOC_TYPE_ILLEGAL,
    AT_CME_LINK_CID_INVALID,
    AT_CME_NO_SUCH_ELEMENT,
    AT_CME_MISSING_RESOURCE,

    AT_CME_IMS_NOT_SUPPORT,
    AT_CME_IMS_SERVICE_EXIST,
    AT_CME_IMS_VOICE_DOMAIN_PS_ONLY,
    AT_CME_IMS_STACK_TIMEOUT,

    AT_CME_1X_RAT_NOT_SUPPORTED,

    AT_CME_USB_TO_VCOM_IN_CONN_ERROR,

    AT_CME_OPERATION_NOT_ALLOWED_IN_CL_MODE,

    AT_CME_SILENT_AES_DEC_PIN_ERROR,
    AT_CME_SILENT_VERIFY_PIN_ERROR,
    AT_CME_SILENT_AES_ENC_PIN_ERROR,
    AT_CME_IMS_OPEN_LTE_NOT_SUPPORT,

    AT_CME_NOT_FIND_FILE,
    AT_CME_NOT_FIND_NV,
    AT_CME_MODEM_ID_ERROR,
    AT_CME_WRITE_NV_TimeOut,
    AT_CME_NV_NOT_SUPPORT_ERR,

    AT_CME_FUNC_DISABLE,
    AT_CME_SCI_ERROR,
    AT_CME_NOT_FOUND_SYNC_SOURCE,

    AT_ERR_EMAT_OPENCHANNEL_ERROR,
    AT_ERR_EMAT_OPENCHANNEL_CNF_ERROR,
    AT_ERR_EMAT_CLOSECHANNEL_ERROR,
    AT_ERR_EMAT_CLOSECHANNEL_CNF_ERROR,
    AT_ERR_EMAT_GETEID_ERROR,
    AT_ERR_EMAT_GETEID_DATA_ERROR,
    AT_ERR_EMAT_GETPKID_ERROR,
    AT_ERR_EMAT_GETPKID_DATA_ERROR,
    AT_ERR_EMAT_CLEANPROFILE_ERROR,
    AT_ERR_EMAT_CLEANPROFILE_DATA_ERROR,
    AT_ERR_EMAT_CHECKPROFILE_ERROR,
    AT_ERR_EMAT_CHECKPROFILE_DATA_ERROR,
    AT_ERR_EMAT_TPDU_CNF_ERROR,
    AT_ERR_EMAT_TPDU_DATASTORE_ERROR,
    AT_ERR_ESIMSWITCH_SET_ERROR,
    AT_ERR_ESIMSWITCH_SET_NOT_ENABLE_ERROR,
    AT_ERR_ESIMSWITCH_QRY_ERROR,
    AT_ERR_CARRIER_MALLOC_FAIL,
    AT_ERR_CARRIER_READ_NV_ORIGINAL_DATA_ERR,
    AT_ERR_CARRIER_FILE_LEN_ERROR,
    AT_ERR_CARRIER_NV_LEN_ERROR,
    AT_ERR_CARRIER_WRITE_NV_FREE_FAIL,
    AT_ERR_CARRIER_NV_ERROR,
    AT_ERR_CARRIER_HMAC_VERIFY_FAIL,

    AT_CME_ERROR_ENUM_END, /* CME ERROR 结束 */

    AT_DEVICE_ERROR_BEGIN,
    AT_DEVICE_MODE_ERROR, /* 装备AT命令错误值 模式错误 */
    AT_FCHAN_BAND_NOT_MATCH,
    AT_FCHAN_SET_CHANNEL_FAIL,
    AT_FCHAN_BAND_CHANNEL_NOT_MATCH,
    AT_FCHAN_OTHER_ERR,
    AT_FDAC_CHANNEL_NOT_SET,
    AT_FDAC_SET_FAIL,
    AT_CHANNEL_NOT_SET,
    AT_FTXON_SET_FAIL,
    AT_FTXON_OTHER_ERR,
    AT_DATA_UNLOCK_ERROR,
    AT_DPAUPA_ERROR,
    AT_SN_LENGTH_ERROR,
    AT_FRXON_OTHER_ERR,
    AT_FRXON_SET_FAIL,
    AT_FPA_OTHER_ERR,
    AT_FLNA_OTHER_ERR,
    AT_FRSSI_OTHER_ERR,
    AT_FRSSI_RX_NOT_OPEN,
    AT_SD_CARD_NOT_EXIST,
    AT_SD_CARD_INIT_FAILED,
    AT_SD_CARD_OPRT_NOT_ALLOWED,
    AT_SD_CARD_ADDR_ERR,
    AT_SD_CARD_OTHER_ERR,
    AT_DEVICE_OTHER_ERROR,
    AT_PHYNUM_LENGTH_ERR,
    AT_PHYNUM_NUMBER_ERR,
    AT_PHYNUM_TYPE_ERR,
    AT_SIMLOCK_PLMN_NUM_ERR,
    AT_SIMLOCK_PLMN_MNC_LEN_ERR,

    AT_DEVICE_NOT_SUPPORT,
    AT_DEVICE_ERR_UNKNOWN,
    AT_DEVICE_INVALID_PARAMETERS,
    AT_DEVICE_NV_NOT_SUPPORT_ID,      /* 520  NV不存在 */
    AT_DEVICE_NV_READ_FAILURE,        /* 521  NV读取失败 */
    AT_DEVICE_NV_WRITE_FAIL_OVERLEN,  /* 522  NV写失败，长度过长 */
    AT_DEVICE_NV_WRITE_FAIL_BADFLASH, /* 523  NV写失败，Flash坏块 */
    AT_DEVICE_NV_WRITE_FAIL_UNKNOWN,  /* 524  NV写失败，其它错误 */
    AT_DEVICE_VCTCXO_OVER_HIGH,
    AT_DEVICE_UE_MODE_ERR,
    AT_DEVICE_NOT_SET_CHAN,
    AT_DEVICE_OPEN_UL_CHAN_ERROR,
    AT_DEVICE_OPEN_DL_CHAN_ERROR,
    AT_DEVICE_OPEN_CHAN_ERROR,
    AT_DEVICE_CLOSE_CHAN_ERROR,
    AT_DEVICE_OPERATION_NOT_SUPPORT,
    AT_DEVICE_INVALID_OP,
    AT_DEVICE_CHAN_BAND_INVALID,
    AT_DEVICE_SET_CHAN_INFO_FAILURE,
    AT_DEVICE_CHAN_BAND_CHAN_NOT_MAP,
    AT_DEVICE_SET_TX_POWER_FAILURE,
    AT_DEVICE_SET_PA_LEVEL_FAILURE,
    AT_DEVICE_NOT_SET_CURRENT_CHAN, /* 与AT_CMD_NOT_SET_CHAN重复，考虑去除 */
    AT_DEVICE_CUR_APC_UNAVAILABLE,
    AT_DEVICE_SET_APC_ERR,
    AT_DEVICE_RD_APC_ERR,
    AT_DEVICE_SET_LNA_ERR,
    AT_DEVICE_NOT_OPEN_DL_CHAN,
    AT_DEVICE_NOT_OPEN_UL_CHAN,
    AT_DEVICE_NO_SIGNAL,
    AT_DEVICE_PHYNUM_LEN_ERR,
    AT_DEVICE_PHYNUM_INVALID,
    AT_DEVICE_PHYNUM_TYPE_ERR,
    AT_DEVICE_PLATFORM_INFO_UNAVAILABLE,
    AT_DEVICE_DATA_LOCK,
    AT_DEVICE_PLMN_OVER_20,
    AT_DEVICE_MNC_NUM_INVALID,
    AT_DEVICE_GET_VER_ERR,
    AT_DEVICE_PORTLOCK_ERR,
    AT_DEVICE_PWD_ERR,
    AT_DEVICE_TIMEOUT_ERR,
    AT_DEVICE_NOT_ENOUGH_MEMORY,
    AT_DEVICE_SIMM_LOCK,
    AT_DEVICE_CLOSE_UL_CHAN_FAILURE,
    AT_DEVICE_CLOSE_DL_CHAN_FAILURE,
    AT_DEVICE_NV_DATA_INVALID,

    AT_FCHAN_BAND_WIDTH_ERR,
    AT_FCHAN_SCS_ERR,
    AT_FCHAN_NO_SCS,
    AT_FCHAN_LOAD_DSP_ERR,
    AT_SND_MSG_FAIL,
    AT_NOT_SET_PATH,
    AT_NOT_LOAD_DSP,
    AT_NOT_SUPPORT_WIFI,
    AT_WIFI_NOT_ENABLE,
    AT_FCHAN_WIFI_BAND_ERR,
    AT_FCHAN_RAT_ERR,
    AT_FWAVE_TYPE_ERR,
    AT_FPA_LEVEL_ERR,
    AT_TSELRF_PATH_ERR,
    AT_ESELRF_TX_OR_RX_ERR,
    AT_DPDT_RAT_ERR,
    AT_MIMO_PARA_ERR,
    AT_TRXTAS_RAT_ERR,
    AT_TRXTAS_FCHAN_RAT_NOT_MATCH,
    AT_TRXTAS_CMD_PARA_ERR,
    AT_TRXTAS_TX_NOT_SWITCH_ON,

    AT_PERSONALIZATION_ERR_BEGIN,
    AT_PERSONALIZATION_IDENTIFY_FAIL,
    AT_PERSONALIZATION_SIGNATURE_FAIL,
    AT_PERSONALIZATION_DK_INCORRECT,
    AT_PERSONALIZATION_PH_PHYNUM_LEN_ERROR,
    AT_PERSONALIZATION_PH_PHYNUM_VALUE_ERROR,
    AT_PERSONALIZATION_PH_PHYNUM_TYPE_ERROR,
    AT_PERSONALIZATION_RSA_ENCRYPT_FAIL,
    AT_PERSONALIZATION_RSA_DECRYPT_FAIL,
    AT_PERSONALIZATION_GET_RAND_NUMBER_FAIL,
    AT_PERSONALIZATION_WRITE_HUK_FAIL,
    AT_PERSONALIZATION_FLASH_ERROR,
    AT_PERSONALIZATION_OTHER_ERROR,
    AT_PERSONALIZATION_OTA_DATA_UPDATE,
    AT_PERSONALIZATION_OTA_RAND_CMP_FAIL,
    AT_PERSONALIZATION_OTA_SUPPORT_CAT_CHECK_FAIL,
    AT_PERSONALIZATION_OTA_SUPPORT_MODEM_NUM_CHECK_FAIL,
    AT_PERSONALIZATION_OTA_SUPPORT_DATA_CFG_CHECK_FAIL,
    AT_PERSONALIZATION_OTA_DATA_LAYER_CHECK_FAIL,
    AT_PERSONALIZATION_OTA_DATA_SIZE_CHECK_FAIL,
    AT_PERSONALIZATION_INTEGRITY_CHECK_TYPE_FAIL,
    AT_PERSONALIZATION_ERR_END,

    AT_DEVICE_ERROR_END,

    AT_CMS_ERROR_ENUM_BEGAIN, /* CMS ERROR 开始 */

    AT_CMS_UNASSIGNED_UNALLOCATED_NUMBER,
    AT_CMS_OPERATOR_DETERMINED_BARRING,
    AT_CMS_CALL_BARRED,
    AT_CMS_SHORT_MESSAGE_TRANSFER_REJECTED,
    AT_CMS_DESTINATION_OUT_OF_SERVICE,
    AT_CMS_UNIDENTIFIED_SUBSCRIBER,
    AT_CMS_FACILITY_REJECTED,
    AT_CMS_UNKNOWN_SUBSCRIBER,
    AT_CMS_NETWORK_OUT_OF_ORDER,
    AT_CMS_TEMPORARY_FAILURE,
    AT_CMS_CONGESTION,
    AT_CMS_RESOURCES_UNAVAILABLE_UNSPECIFIED,
    AT_CMS_REQUESTED_FACILITY_NOT_SUBSCRIBED,
    AT_CMS_REQUESTED_FACILITY_NOT_IMPLEMENTED,
    AT_CMS_INVALID_SHORT_MESSAGE_TRANSFER_REFERENCE_VALUE,
    AT_CMS_INVALID_MESSAGE_UNSPECIFIED,
    AT_CMS_INVALID_MANDATORY_INFORMATION,
    AT_CMS_MESSAGE_TYPE_NON_EXISTENT_OR_NOT_IMPLEMENTED,
    AT_CMS_MESSAGE_NOT_COMPATIBLE_WITH_SHORT_MESSAGE_PROTOCOL_STATE,
    AT_CMS_INFORMATION_ELEMENT_NON_EXISTENT_OR_NOT_IMPLEMENTED,
    AT_CMS_PROTOCOL_ERROR_UNSPECIFIED,
    AT_CMS_INTERWORKING_UNSPECIFIED,

    AT_CMS_TELEMATIC_INTERWORKING_NOT_SUPPORTED,
    AT_CMS_SHORT_MESSAGE_TYPE_0_NOT_SUPPORTED,
    AT_CMS_CANNOT_REPLACE_SHORT_MESSAGE,
    AT_CMS_UNSPECIFIED_TPPID_ERROR,
    AT_CMS_DATA_CODING_SCHEME_ALPHABET_NOT_SUPPORTED,
    AT_CMS_MESSAGE_CLASS_NOT_SUPPORTED,
    AT_CMS_UNSPECIFIED_TPDCS_ERROR,
    AT_CMS_COMMAND_CANNOT_BE_ACTIONED,
    AT_CMS_COMMAND_UNSUPPORTED,
    AT_CMS_UNSPECIFIED_TPCOMMAND_ERROR,
    AT_CMS_TPDU_NOT_SUPPORTED,
    AT_CMS_SC_BUSY,
    AT_CMS_NO_SC_SUBSCRIPTION,
    AT_CMS_SC_SYSTEM_FAILURE,
    AT_CMS_INVALID_SME_ADDRESS,
    AT_CMS_DESTINATION_SME_BARRED,
    AT_CMS_SM_REJECTEDDUPLICATE_SM,
    AT_CMS_TPVPF_NOT_SUPPORTED,
    AT_CMS_TPVP_NOT_SUPPORTED,
    AT_CMS_SIM_SMS_STORAGE_FULL,
    AT_CMS_NO_SMS_STORAGE_CAPABILITY_IN_SIM,
    AT_CMS_ERROR_IN_MS,
    AT_CMS_MEMORY_CAPACITY_EXCEEDED,
    AT_CMS_SIM_APPLICATION_TOOLKIT_BUSY,
    AT_CMS_SIM_DATA_DOWNLOAD_ERROR,
    AT_CMS_UNSPECIFIED_ERROR_CAUSE,

    AT_CMS_ME_FAILURE,
    AT_CMS_SMS_SERVICE_OF_ME_RESERVED,
    AT_CMS_OPERATION_NOT_ALLOWED,
    AT_CMS_OPERATION_NOT_SUPPORTED,
    AT_CMS_INVALID_PDU_MODE_PARAMETER,
    AT_CMS_INVALID_TEXT_MODE_PARAMETER,
    AT_CMS_U_SIM_NOT_INSERTED,
    AT_CMS_U_SIM_PIN_REQUIRED,
    AT_CMS_PH_U_SIM_PIN_REQUIRED,
    AT_CMS_U_SIM_FAILURE,
    AT_CMS_U_SIM_BUSY,
    AT_CMS_U_SIM_WRONG,
    AT_CMS_U_SIM_PUK_REQUIRED,
    AT_CMS_U_SIM_PIN2_REQUIRED,
    AT_CMS_U_SIM_PUK2_REQUIRED,
    AT_CMS_MEMORY_FAILURE,
    AT_CMS_INVALID_MEMORY_INDEX,
    AT_CMS_MEMORY_FULL,
    AT_CMS_SMSC_ADDRESS_UNKNOWN,
    AT_CMS_NO_NETWORK_SERVICE,
    AT_CMS_NETWORK_TIMEOUT,
    AT_CMS_NO_CNMA_ACKNOWLEDGEMENT_EXPECTED,
    AT_CMS_FDN_DEST_ADDR_FAILED,
    AT_CMS_FDN_SERVICE_CENTER_ADDR_FAILED,
    AT_CMS_MO_SMS_CONTROL_FAILED,
    AT_CMS_UNKNOWN_ERROR,

    AT_CMS_ERROR_ENUM_END, /* CME ERROR 结束 */

    AT_CMOLRE_ERR_ENUM_BEGIN, /* CMOLRE ERROR 开始 */
    AT_CMOLRE_METHOD_NOT_SUPPORTED,
    AT_CMOLRE_ADDITIONAL_ASSIS_DATA_REQIRED,
    AT_CMOLRE_NOT_ENOUGH_SATELLITES,
    AT_CMOLRE_UE_BUSY,
    AT_CMOLRE_NETWORK_ERROR,
    AT_CMOLRE_TOO_MANY_CONNECTIONS,
    AT_CMOLRE_TOO_MANY_USERS,
    AT_CMOLRE_FAILURE_DUE_TO_HANDOVER,
    AT_CMOLRE_INTERNET_CONN_FAILURE,
    AT_CMOLRE_MEMORY_ERROR,
    AT_CMOLRE_UNKNOWN_ERROR,
    AT_CMOLRE_ERR_ENUM_END, /* CMOLRE ERROR 结束 */

    AT_DIAG_ENUM_BEGIN, /* DIAG ERROR 开始 */
    AT_DIAG_USB_NOT_SUPPORT_CPS,
    AT_DIAG_USB_NOT_SUPPORT_CFG,
    AT_DIAG_CPS_SET_ERROR,
    AT_DIAG_GET_PORT_ERROR,
    AT_DIAG_VCOM_SET_CPS_ERROR,
    AT_DIAG_VCOM_SET_CFG_ERROR,
    AT_DIAG_VCOM_SET_NOCPS_ERROR,
    AT_DIAG_CFG_SET_ERROR,
    AT_DIAG_GET_PORT_NOT_USB_OR_VCOM,
    AT_DIAG_ENUM_END, /* DIAG ERROR 结束 */

    AT_CMD_NOT_SUPPORT,
    AT_TOO_MANY_PARA,

    AT_ABORT,
    AT_RRETURN_CODE_BUTT /* RETURN CODE 结束 */
};

typedef VOS_UINT32 AT_RreturnCodeUint32;

#if (FEATURE_UE_MODE_CDMA == FEATURE_ON)
#if (FEATURE_CHINA_TELECOM_VOICE_ENCRYPT == FEATURE_ON)

enum AT_EncryptVoiceError {

    AT_ENCRYPT_VOICE_SUCC = 0x0000,
    AT_ENCRYPT_VOICE_TIMEOUT,
    AT_ENCRYPT_VOICE_LOCAL_TERMINAL_NO_AUTHORITY,
    AT_ENCRYPT_VOICE_REMOTE_TERMINAL_NO_AUTHORITY,
    AT_ENCRYPT_VOICE_LOCAL_TERMINAL_ILLEGAL,
    AT_ENCRYPT_VOICE_REMOTE_TERMINAL_ILLEGAL,
    AT_ENCRYPT_VOICE_UNKNOWN_ERROR,
    AT_ENCRYPT_VOICE_SIGNTURE_VERIFY_FAILURE,
    AT_ENCRYPT_VOICE_INTERNAL_ERROR,
    AT_ENCRYPT_VOICE_MT_CALL_NOTIFICATION,

    /* XSMS的起始原因值 */
    AT_ENCRYPT_VOICE_XSMS_SEND_RESULT_FAIL = 0x1000,
    AT_ENCRYPT_VOICE_XSMS_SEND_RESULT_POOL_FULL,
    AT_ENCRYPT_VOICE_XSMS_SEND_RESULT_LINK_ERR,
    AT_ENCRYPT_VOICE_XSMS_SEND_RESULT_NO_TL_ACK,
    AT_ENCRYPT_VOICE_XSMS_SEND_RESULT_ENCODE_ERR,
    AT_ENCRYPT_VOICE_XSMS_SEND_RESULT_UNKNOWN,

    /* 其他XCALL内部原因值 */
    AT_ENCRYPT_VOICE_SO_NEGO_FAILURE = 0x2000,
    AT_ENCRYPT_VOICE_TWO_CALL_ENTITY_EXIST,
    AT_ENCRYPT_VOICE_NO_MO_CALL,
    AT_ENCRYPT_VOICE_NO_MT_CALL,
    AT_ENCRYPT_VOICE_NO_CALL_EXIST,
    AT_ENCRYPT_VOICE_CALL_STATE_NOT_ALLOWED,
    AT_ENCRYPT_VOICE_CALL_NUM_MISMATCH,
    AT_ENCRYPT_VOICE_ENC_VOICE_STATE_MISMATCH,
    AT_ENCRYPT_VOICE_MSG_ENCODE_FAILUE,
    AT_ENCRYPT_VOICE_MSG_DECODE_FAILUE,
    AT_ENCRYPT_VOICE_GET_TEMP_PUB_PIVA_KEY_FAILURE,
    AT_ENCRYPT_VOICE_FILL_CIPHER_TEXT_FAILURE,
    AT_ENCRYPT_VOICE_ECC_CAP_NOT_SUPPORTED,
    AT_ENCRYPT_VOICE_ENC_VOICE_MODE_UNKNOWN,
    AT_ENCRYPT_VOICE_ENC_VOICE_MODE_MIMATCH,
    AT_ENCRYPT_VOICE_CALL_RELEASED,
    AT_ENCRYPT_VOICE_CALL_ANSWER_REQ_FAILURE,
    AT_ENCRYPT_VOICE_DECRYPT_KS_FAILURE,
    AT_ENCRYPT_VOICE_FAILURE_CAUSED_BY_INCOMING_CALL,
    AT_ENCRYPT_VOICE_INIT_VOICE_FUNC_FAILURE,
    AT_ENCRYPT_VOICE_ERROR_ENUM_BUTT
};
typedef VOS_UINT32 AT_EncryptVoiceErrorUint32;
#endif
#endif

typedef VOS_UINT8 AT_CMD_FORMAT_TYPE;
#define AT_EXTEND_CMD_TYPE 0
#define AT_BASIC_CMD_TYPE 1
#define AT_CMD_TYPE_BUTT 2

typedef VOS_UINT8 AT_CMD_OPT_TYPE;
#define AT_CMD_OPT_SET_CMD_NO_PARA 0
#define AT_CMD_OPT_SET_PARA_CMD 1
#define AT_CMD_OPT_READ_CMD 2
#define AT_CMD_OPT_TEST_CMD 3
#define AT_CMD_OPT_BUTT 4
#if (FEATURE_UE_MODE_NR == FEATURE_ON)
#define AT_MAX_PARA_NUMBER 24
#else
#define AT_MAX_PARA_NUMBER 16
#endif

#define AT_PARA_SCALE_MAX_LEN 24
#define AT_CMD_NAME_LEN 50

#if (FEATURE_IOT_ATNLPROXY == FEATURE_OFF)
#if (VOS_WIN32 == VOS_OS_VER)
#define AT_PARA_MAX_LEN 1020 /* +CGLA命令中字符串长度最大为532 */
#else
#define AT_PARA_MAX_LEN 560 /* +CGLA命令中字符串长度最大为532 */
#endif
#else
#define AT_PARA_MAX_LEN 2055 /* +CGLA命令中字符串长度最大为532 */
#endif

#define AT_FW_PARAM_MAX_LEN 40

#define AT_FW_LEN_AT 2

#if (FEATURE_IOT_ATNLPROXY == FEATURE_ON)

#define NL_AT_PARA_MAX_LEN_ALL   3072

#define FIX_NL_DATA_RESPONSE_LENGTH 5000

#define AT_ATNLPROXY_MSG 188

#define NETLINK_ATNLPROXY 27
#define NL_AT_MAX_PARA_NUMBER 16

#define NL_MAX_AT_LEN 64
/* 区分下发命令和上报命令的边界 */
#define ATNL_MAGIC_LEN 1024
/* 魔术字最大值，防止越界 */
#define ATNL_MAX_MAGIC_LEN 20000

#define FIX_ATNL_RESPONSE_LEN (6 * sizeof(int))

#define MAX_ATNL_RESPONSE_LEN (FIX_NL_DATA_RESPONSE_LENGTH  - FIX_ATNL_RESPONSE_LEN - sizeof(AT_NL_DeviceEvent))

/*永久等待，参考VOS_TIMER_MAX_LENGTH，大于VOS_TIMER_MAX_LENGTH即可*/
#define NL_AT_INFINITE_WAIT_TIME 100000000
#define OVER_CPY_PARANUM  1

typedef VOS_UINT32 (*PFN_ATNLPROXY_CMD_PROC)(void* pin, void* pout);
/*lint -e958 -e959 ;cause:64bit*/
 typedef struct
{
    VOS_UINT64 cmdIndex;              /* 固定为0*/

    PFN_ATNLPROXY_CMD_PROC   pfnSetProc;    /* 设置函数 */
    VOS_UINT64 setTimeOut;                   /* 设置函数的超时时间 */

    PFN_ATNLPROXY_CMD_PROC   pfnQryProc;   /*查询函数 */
    VOS_UINT64 qryTimeOut;

    PFN_ATNLPROXY_CMD_PROC   pfnTestProc;  /*测试函数 */
    VOS_UINT64 testTimeOut;


    PFN_ATNLPROXY_CMD_PROC   pfnAbortProc;  /* 打断函数 */
    VOS_UINT32 abortTimeOut;          /* 打断定时器 */


    VOS_UINT32 paramErrCode;  /* 解析参数失败时的错误码 */
    VOS_UINT64 chkFlag;


} AT_NL_FixedParaCmdElementStru;

 typedef struct
{
    AT_NL_FixedParaCmdElementStru fixed;
    VOS_UINT32 cmdLength;
    const VOS_UINT8* cmdName;
    VOS_UINT32 paraLength;
    const VOS_UINT8* param;
} AT_NL_ParaCmdElementStru;
/*lint +e958 +e959 ;cause:64bit*/
typedef struct
{
    TAF_INT32 deviceId;
    TAF_INT32 eventCode;
    TAF_INT32 len;
    TAF_CHAR data[0];
} AT_NL_DeviceEvent;

enum AT_NL_Type
{
    NL_TYPE_SET,
    NL_TYPE_QUERY,
    NL_TYPE_TEST,
    NL_TYPE_ABORT
};
typedef VOS_UINT8 AT_NL_TypeUint8;

typedef struct
{
    TAF_UINT32 paraValue;
    TAF_UINT32 byteOffsetInParaPool;    /* 用来放置解析出的参数字符串 */
    TAF_UINT16 paralen;
    TAF_UINT16 paraLenCpy;                           /* 用来标识参数字符串长度 */
} AT_NL_ParseParaTypeStru;

/* 事 件 设 备 ID */
typedef enum
{
    NL_DEVICE_ID_NULL_ID = 0,     /* 空id，用于初始化id */
    NL_DEVICE_ID_ATNLPROXY = 1,        /* DEVICE_ID_ATNLPROXT id */
    NL_DEVICE_ID_MAX_ID           /* 用做边界保护 */
} AT_NL_DeviceId;

typedef struct
{
    /*管道如PCUI口等参考AT_CLIENT_ID_ENUM枚举变量，大部分业务不关心此字段*/
    TAF_INT32 index;
    TAF_INT32 magic;
    /*魔术字，有两个作用：1在此AT处理中，带有此魔术字的ATS发下来
                                                               消息，可以通过串化通道
                                                               2.上面的状态机在等待有相同魔术字的回复*/
    /*设置，查询，测试，中断*/
    AT_NL_TypeUint8 nlType;

    /*参考内核的AT_CMD_OPT_TYPE定义，为了区分设置命令是否带=号*/
    TAF_UCHAR optType;

    TAF_INT8 rsv[2];

    /*参考MAX_MATCH_SIZE 64*/
    TAF_CHAR atcmd[NL_MAX_AT_LEN];
    /*参数个数*/
    TAF_INT32 paraCount;
    /*参数*/
    AT_NL_ParseParaTypeStru paraList[NL_AT_MAX_PARA_NUMBER];
    TAF_CHAR atparapldpool[NL_AT_PARA_MAX_LEN_ALL];
} NLTRANSFER;

typedef struct
{
    /* 管道如PCUI口等参考AT_CLIENT_ID_ENUM枚举变量，大部分业务不关心此字段 */
    TAF_INT32 uindex;
    /*这个字段由ATproxy US自动填充*/
    TAF_INT32 magic;
    /* 如果应用层和内核之间有交互，则通过这个字段标明含义，使用AT_NL_PROTOCOL_TYPE赋值 */
    TAF_INT32 protocol;
    /* 消息标识，电源管理模块判断用参见HUAWEI_PM_RSP_ID_UR_IPDATA */
    TAF_INT32 id;
    /* 兼容内核的AT返回，如果m_length == 0，则此值有意义 */
    TAF_UINT32 retenum;
    /* 这个长度是m_buffer中的有效数据长度 */
    TAF_INT32 length;
    /* response长度 */
    TAF_CHAR buffer[MAX_ATNL_RESPONSE_LEN];
} NLRESPONSE;

typedef enum _AT_NL_ProtocolType
{
    /*通知内核此AT上报为往特定端口上报的主动上报，端口在m_uindex中指定*/
    AT_NL_PROTOCOL_FIX_UNSOLIDREPORT = 1,
    /*通知内核打开UART上的主动上报，修改NV 9202 相应位为 4*/
    AT_NL_PROTOCOL_OPEN_UART_UNSOLIDREPORT,
    /*通知内核关闭UART上的主动上报，修改NV 9202 相应位为 0*/
    AT_NL_PROTOCOL_CLOSE_UART_UNSOLIDREPORT,
    /*通知内核更新GPS状态为开启状态*/
    AT_NL_PROTOCOL_GPS_RUNNING_UNSOLIDREPORT,
    /*通知内核更新GPS状态为关闭状态*/
    AT_NL_PROTOCOL_GPS_STOP_UNSOLIDREPORT,
    /*通知内核更新GPS的MT状态为使能状态*/
    AT_NL_PROTOCOL_GPS_MT_ENABLE,
    /*通知内核更新GPS的MT状态为去使能状态*/
    AT_NL_PROTOCOL_GPS_MT_DISABLE,

} AT_NL_ProtocolType;

extern TAF_CHAR g_NL_Transfer_Buf[sizeof(NLTRANSFER) + sizeof(AT_NL_DeviceEvent)];
#endif

typedef struct {
    VOS_UINT32 paraValue;
    VOS_UINT8  para[AT_PARA_MAX_LEN + 1]; /* 用来放置解析出的参数字符串 */
    VOS_UINT8  reserved[1];
#if (FEATURE_IOT_ATNLPROXY == FEATURE_ON)
    VOS_UINT8  rev[1];
#endif
    VOS_UINT16 paraLen; /* 用来标识参数字符串长度 */
} AT_ParseParaType;

typedef VOS_UINT32 (*pAtChkFuncType)(AT_ParseParaType *pPara);

#define AT_STRCMP(Str1, Str2) VOS_StrCmp(Str1, Str2)
#define AT_STRLEN(Str) VOS_StrLen(Str)
#define AT_STRSTR(Str1, Str2) VOS_StrStr(Str1, Str2)

/* 组合命令 */
#define AT_MAX_NUM_COMBINE_CMD 40  /* 一个AT码流最多可分解为40个组合命令(refer to Q) */
#define AT_MAX_LEN_COMBINE_CMD 545 /* 一条组合命令最多包含545个字符(refer to Q) */

#define AT_DIE_SN_LEN 20 /* DIE SN 16进制 20字节长度 */

typedef struct {
    VOS_UINT32 len;
    VOS_UINT8  data[0];  //lint !e43
} AT_FW_CombineCmd;

typedef struct {
    AT_FW_CombineCmd *combCmd;
    HI_LIST_S         combCmdList;
} AT_FW_CombineCmdNode;

typedef struct {
    VOS_UINT16 totalNum;
    VOS_UINT16 procNum;
    VOS_UINT8  reserved[4];
    HI_LIST_S  combineCmdList; /* AT_FW_COMBINE_CMD_NODE_STRU */
} AT_FW_CombineCmdInfo;

typedef struct {
    VOS_UINT32 small;
    VOS_UINT32 big;
} AT_PARA_NumRange;

typedef struct {
    VOS_UINT8  cmdName[AT_CMD_NAME_LEN + 1]; /* 用来放置解析出的命令名原字符串 */
    VOS_UINT8  reserved[3];
    VOS_UINT16 cmdNameLen; /* 用来标识参数字符串长度 */
} AT_ParseCmdNameType;

typedef struct {
    VOS_UINT8           strRange[AT_MAX_PARA_NUMBER][AT_PARA_SCALE_MAX_LEN + 1];
    AT_PARA_NumRange    paraNumRange[AT_MAX_PARA_NUMBER];
    AT_ParseCmdNameType cmdName;

    VOS_UINT8 paraNumRangeIndex;
    VOS_UINT8 paraStrRangeIndex;
    VOS_UINT8 paraCheckIndex;
    VOS_UINT8 paraIndex;

    AT_CMD_OPT_TYPE    cmdOptType;
    AT_CMD_FORMAT_TYPE cmdFmtType;
    VOS_UINT8          reserved[2];
} AT_PARSECMD;

typedef VOS_UINT32 AT_STATUS;
#define AT_FW_CLIENT_STATUS_READY 0
#define AT_FW_CLIENT_STATUS_PEND 1

/* 命令处理函数类型 */
typedef VOS_UINT32 (*PFN_AT_FW_CMD_PROC)(VOS_UINT8 ucClientId);

/* 命令异步处理函数类型 */
typedef VOS_UINT32 (*PFN_AT_FW_MSG_PROC)(VOS_UINT8 ucClientId, struct MsgCB *pMsgBlock);

/* 主动上报 */
typedef VOS_UINT32 (*PFN_AT_FW_IND_PROC)(struct MsgCB *pMsgBlock);

#define CMD_TBL_E5_IS_LOCKED 0x00000001      /* 不受E5锁定控制的命令 */
#define CMD_TBL_PIN_IS_LOCKED 0x00000002     /* 不受PIN码锁定控制的命令 */
#define CMD_TBL_IS_E5_DOCK 0x00000004        /* E5 DOCK命令 */
#define CMD_TBL_CLAC_IS_INVISIBLE 0x00000008 /* +CLAC命令中不输出显示的命令 */

#define CMD_TBL_LIMITED_NULL 0x00000000 /* 最常用的,受E5 PIN码限制的命令 */

#define CMD_TBL_NO_LIMITED (CMD_TBL_E5_IS_LOCKED | CMD_TBL_PIN_IS_LOCKED) /* 无任何限制的命令 */

/*
 * E5形态下与Stick形态下CLAC不显示的命令不相同的有:
 * E5:
 * +CSIM ^CPDW ^CMLCK ^IMSICHG ^PDPSTUB ^CCC ^COMM ^CAATT ^CELLSRCH ^VMSET ^CDTMFS ^CDTMFE ^DOCK
 * S6, S7, T, P, X, Q, &C, &D
 * Stick:
 * +CBC ^DIALMODE ^PORTSEL ^U2DIAG ^GETPORTMODE ^AT2OM
 * 相同的有:
 * +CEER +CTFR ^CMSTUB ^CMGSSEG ^CMMI ^FLOWRPTCTRL ^CCIN ^STPD   ^STMN  ^STTR ^STEN  ^CARD  ^CSND ^CMST ^TEST
 * ^CMM  ^BOOT $QCDMG  ^CIMEI   ^DWINS ^USSDMODE   ^RSSI ^CVOICE ^DDSETEX ^YJCX ^ADCTEMP ^SETPID ^CGAUTH
 */
/*
 * 不显示的命令中相同的依然使用 CMD_TBL_CLAC_IS_INVISIBLE来标识
 * 不显示的命令中E5特有的使用下面定义的宏 CMD_TBL_CLAC_IS_INVISIBLE_E5
 * 不显示的命令中STICK特有的使用下面定义的宏 CMD_TBL_CLAC_IS_INVISIBLE_STICK
 */

/* 遗留问题，CLAC在不同形态下如何实现 */
#define CMD_TBL_CLAC_IS_INVISIBLE_E5 CMD_TBL_LIMITED_NULL /* E5形态下+CLAC命令中不输出显示的命令 */
/* STICK形态下+CLAC命令中不输出显示的命令 */
#define CMD_TBL_CLAC_IS_INVISIBLE_STICK CMD_TBL_LIMITED_NULL

#if (FEATURE_AT_CMD_TRUST_LIST == FEATURE_ON)
#define TRUST_LIST_CMD_CLAC_IS_INVISIBLE 0x0 /* Trust名单列表中+CLAC命令不输出显示的命令 */
#define TRUST_LIST_CMD_CLAC_IS_VISIBLE   0x1 /* Trust名单列表中+CLAC命令输出显示的命令 */
#endif

#if (FEATURE_UE_MODE_NR == FEATURE_ON)
#define AT_SET_CGDCONT_PARA_MAX_NUMBER 22
#else
#define AT_SET_CGDCONT_PARA_MAX_NUMBER 11
#endif

#if (FEATURE_UE_MODE_NR == FEATURE_ON)
#define AT_SET_CGTFT_PARA_MAX_NUMBER 13
#else
#define AT_SET_CGTFT_PARA_MAX_NUMBER 12
#endif

#if (FEATURE_LTE == FEATURE_ON)
#if (FEATURE_UE_MODE_NR == FEATURE_ON)
#define CGDCONT_CMD_PARA_STRING \
    "(0-31),(\"IP\",\"IPV6\",\"IPV4V6\",\"PPP\",\"ETHERNET\",\"\"),(APN),(PdpAddr),(0-2),(0-3),(0,1),(0,1),(0-2),\
(0,1),(0,1),(0,1),(0,1),(0,1),(0,1),(0,1),(0-2),(SNssai),(0),(0,1),(0),(0,1)"
#else
#define CGDCONT_CMD_PARA_STRING \
    "(0-31),(\"IP\",\"IPV6\",\"IPV4V6\",\"PPP\",\"\"),(APN),(PdpAddr),(0-2),(0-3),(0,1),(0,1),(0-2),(0,1),(0,1)"
#endif
#else
#define CGDCONT_CMD_PARA_STRING \
    "(1-11),(\"IP\",\"IPV6\",\"IPV4V6\",\"PPP\",\"\"),(APN),(PdpAddr),(0-2),(0-3),(0,1),(0,1),(0-2),(0,1),(0,1)"
#endif /* FEATURE_LTE == FEATURE_ON */

#if (FEATURE_UE_MODE_NR == FEATURE_ON) && (FEATURE_LTE == FEATURE_ON)
#define COPS_CMD_PARA_STRING "(0,1,2,3,4),(0-2),(@oper),(0,2,7,12)"
#elif (FEATURE_UE_MODE_NR == FEATURE_ON)
#define COPS_CMD_PARA_STRING "(0,1,2,3,4),(0-2),(@oper),(0,2,12)"
#elif (FEATURE_LTE == FEATURE_ON)
#define COPS_CMD_PARA_STRING "(0,1,2,3,4),(0-2),(@oper),(0,2,7)"
#else
#define COPS_CMD_PARA_STRING "(0,1,2,3,4),(0-2),(@oper),(0,2)"
#endif

#if (FEATURE_UE_MODE_NR == FEATURE_ON) && (FEATURE_LTE == FEATURE_ON)
#define CPOL_CMD_PARA_STRING "(1-100),(0-2),(oper),(0,1),(0,1),(0,1),(0,1),(0,1)"
#elif (FEATURE_UE_MODE_NR == FEATURE_ON)
#define CPOL_CMD_PARA_STRING "(1-100),(0-2),(oper),(0,1),(0,1),(0,1),(0,1)"
#elif (FEATURE_LTE == FEATURE_ON)
#define CPOL_CMD_PARA_STRING "(1-100),(0-2),(oper),(0,1),(0,1),(0,1),(0,1)"
#else
#define CPOL_CMD_PARA_STRING "(1-100),(0-2),(oper),(0,1),(0,1),(0,1)"
#endif

#define SIMLOCKDATAREADEX_CMD_PARA_STRING "(0,1,2,3,255),(1-255)"
#define SIMLOCKDATAWRITEEX_CMD_PARA_STRING "(0,1,2,3,255),(1-255),(1-255),(@SimlockData),(@hmac)"

#if (FEATURE_LTE == FEATURE_ON)
#define CGDSCONT_CMD_PARA_STRING "(1-31),(0-31),(0-2),(0-3),(0-1)"
#else
#define CGDSCONT_CMD_PARA_STRING "(1-11),(0-11),(0-2),(0-3),(0-1)"
#endif /* FEATURE_LTE == FEATURE_ON */

#if (FEATURE_LTE == FEATURE_ON)
#if (FEATURE_UE_MODE_NR == FEATURE_ON)
#define CGTFT_CMD_PARA_STRING \
    "(1-31),(1-16),(0-255),(IpMask),(0-255),(Dpr),(Spr),(0-4294967295),(TosM),(0-1048575),(0-3),(LocalIpMask),(0-255)"
#else
#define CGTFT_CMD_PARA_STRING \
    "(1-31),(1-16),(0-255),(IpMask),(0-255),(Dpr),(Spr),(0-4294967295),(TosM),(0-1048575),(0-3),(LocalIpMask)"
#endif
#else
#define CGTFT_CMD_PARA_STRING \
    "(1-11),(1-16),(0-255),(IpMask),(0-255),(Dpr),(Spr),(0-4294967295),(TosM),(0-1048575),(0-3)"
#endif /* FEATURE_LTE == FEATURE_ON */

#if (FEATURE_LTE == FEATURE_ON)
#define CGACT_CMD_PARA_STRING "(0,1),(1-31),(1-31),(1-31),(1-31),(1-31),(1-31),(1-31),(1-31),(1-31),(1-31),(1-31)"
#else
#define CGACT_CMD_PARA_STRING "(0,1),(1-11),(1-11),(1-11),(1-11),(1-11),(1-11),(1-11),(1-11),(1-11),(1-11),(1-11)"
#endif /* FEATURE_LTE == FEATURE_ON */

#if (FEATURE_LTE == FEATURE_ON)
#define CGCMOD_CMD_PARA_STRING "(1-31),(1-31),(1-31),(1-31),(1-31),(1-31),(1-31),(1-31),(1-31),(1-31),(1-31)"
#else
#define CGCMOD_CMD_PARA_STRING "(1-11),(1-11),(1-11),(1-11),(1-11),(1-11),(1-11),(1-11),(1-11),(1-11),(1-11)"
#endif /* FEATURE_LTE == FEATURE_ON */

#if (FEATURE_LTE == FEATURE_ON)
#define CGPADDR_CMD_PARA_STRING "(1-31),(1-31),(1-31),(1-31),(1-31),(1-31),(1-31),(1-31),(1-31),(1-31),(1-31)"
#else
#define CGPADDR_CMD_PARA_STRING "(1-11),(1-11),(1-11),(1-11),(1-11),(1-11),(1-11),(1-11),(1-11),(1-11),(1-11)"
#endif /* FEATURE_LTE == FEATURE_ON */

#if (FEATURE_LTE == FEATURE_ON)
#define CGEQNEG_CMD_PARA_STRING "(1-31),(1-31),(1-31),(1-31),(1-31),(1-31),(1-31),(1-31),(1-31),(1-31),(1-31)"
#else
#define CGEQNEG_CMD_PARA_STRING "(1-11),(1-11),(1-11),(1-11),(1-11),(1-11),(1-11),(1-11),(1-11),(1-11),(1-11)"
#endif /* FEATURE_LTE == FEATURE_ON */

#if (FEATURE_LTE == FEATURE_ON)
#define CGANS_CMD_PARA_STRING "(0,1),(\"NULL\"),(1-31)"
#else
#define CGANS_CMD_PARA_STRING "(0,1),(\"NULL\"),(1-11)"
#endif /* FEATURE_LTE == FEATURE_ON */

#define CGANS_EXT_CMD_PARA_STRING "(0,1)"

#if (FEATURE_LTE == FEATURE_ON)
#define CGDATA_CMD_PARA_STRING "(\"NULL\"),(1-31),(1-31),(1-31),(1-31),(1-31),(1-31),(1-31),(1-31),(1-31),(1-31),(1-31)"
#else
#define CGDATA_CMD_PARA_STRING "(\"NULL\"),(1-11),(1-11),(1-11),(1-11),(1-11),(1-11),(1-11),(1-11),(1-11),(1-11),(1-11)"
#endif /* FEATURE_LTE == FEATURE_ON */

#if (FEATURE_LTE == FEATURE_ON)
#define AUTHDATA_CMD_PARA_STRING "(0-31),(0-2),(PLMN),(PASSWORD),(USERNAME)"
#else
#define AUTHDATA_CMD_PARA_STRING "(1-11),(0-2),(PLMN),(PASSWORD),(USERNAME)"
#endif /* FEATURE_LTE == FEATURE_ON */

#if (FEATURE_LTE == FEATURE_ON)
#if (PS_UE_REL_VER < PS_PTL_VER_R5)
#define CGEQREQ_CMD_PARA_STRING \
    "(1-31),(0-4),(0-8640),(0-8640),(0-8640),(0-8640),(0-2),(0-1520),(\"0E0\",\"1E2\",\"7E3\",\"1E3\",\"1E4\",\"1E5\",\"1E6\",\"1E1\"),(\"0E0\",\"5E2\",\"1E2\",\"5E3\",\"4E3\",\"1E3\",\"1E4\",\"1E5\",\"1E6\",\"6E8\"),(0-3),(0-4100),(0-3),(0-1),(0-1)"
#define CGEQMIN_CMD_PARA_STRING \
    "(1-31),(0-4),(0-8640),(0-8640),(0-8640),(0-8640),(0-2),(0-1520),(\"0E0\",\"1E2\",\"7E3\",\"1E3\",\"1E4\",\"1E5\",\"1E6\",\"1E1\"),(\"0E0\",\"5E2\",\"1E2\",\"5E3\",\"4E3\",\"1E3\",\"1E4\",\"1E5\",\"1E6\",\"6E8\"),(0-3),(0-4100),(0-3),(0-1),(0-1)"
#elif (PS_UE_REL_VER <= PS_PTL_VER_R6)
#define CGEQREQ_CMD_PARA_STRING \
    "(1-31),(0-4),(0-2048),(0-16000),(0-2048),(0-16000),(0-2),(0-1520),(\"0E0\",\"1E2\",\"7E3\",\"1E3\",\"1E4\",\"1E5\",\"1E6\",\"1E1\"),(\"0E0\",\"5E2\",\"1E2\",\"5E3\",\"4E3\",\"1E3\",\"1E4\",\"1E5\",\"1E6\",\"6E8\"),(0-3),(0-4100),(0-3),(0-1),(0-1)"
#define CGEQMIN_CMD_PARA_STRING \
    "(1-31),(0-4),(0-2048),(0-16000),(0-2048),(0-16000),(0-2),(0-1520),(\"0E0\",\"1E2\",\"7E3\",\"1E3\",\"1E4\",\"1E5\",\"1E6\",\"1E1\"),(\"0E0\",\"5E2\",\"1E2\",\"5E3\",\"4E3\",\"1E3\",\"1E4\",\"1E5\",\"1E6\",\"6E8\"),(0-3),(0-4100),(0-3),(0-1),(0-1)"
#else
#define CGEQREQ_CMD_PARA_STRING \
    "(1-31),(0-4),(0-11480),(0-42000),(0-11480),(0-42000),(0-2),(0-1520),(\"0E0\",\"1E2\",\"7E3\",\"1E3\",\"1E4\",\"1E5\",\"1E6\",\"1E1\"),(\"0E0\",\"5E2\",\"1E2\",\"5E3\",\"4E3\",\"1E3\",\"1E4\",\"1E5\",\"1E6\",\"6E8\"),(0-3),(0-4100),(0-3),(0-1),(0-1)"
#define CGEQMIN_CMD_PARA_STRING \
    "(1-31),(0-4),(0-11480),(0-42000),(0-11480),(0-42000),(0-2),(0-1520),(\"0E0\",\"1E2\",\"7E3\",\"1E3\",\"1E4\",\"1E5\",\"1E6\",\"1E1\"),(\"0E0\",\"5E2\",\"1E2\",\"5E3\",\"4E3\",\"1E3\",\"1E4\",\"1E5\",\"1E6\",\"6E8\"),(0-3),(0-4100),(0-3),(0-1),(0-1)"
#endif /* PS_UE_REL_VER < PS_PTL_VER_R5 */

#else
#if (PS_UE_REL_VER < PS_PTL_VER_R5)
#define CGEQREQ_CMD_PARA_STRING \
    "(1-11),(0-4),(0-8640),(0-8640),(0-8640),(0-8640),(0-2),(0-1520),(\"0E0\",\"1E2\",\"7E3\",\"1E3\",\"1E4\",\"1E5\",\"1E6\",\"1E1\"),(\"0E0\",\"5E2\",\"1E2\",\"5E3\",\"4E3\",\"1E3\",\"1E4\",\"1E5\",\"1E6\",\"6E8\"),(0-3),(0-4100),(0-3),(0-1),(0-1)"
#define CGEQMIN_CMD_PARA_STRING \
    "(1-11),(0-4),(0-8640),(0-8640),(0-8640),(0-8640),(0-2),(0-1520),(\"0E0\",\"1E2\",\"7E3\",\"1E3\",\"1E4\",\"1E5\",\"1E6\",\"1E1\"),(\"0E0\",\"5E2\",\"1E2\",\"5E3\",\"4E3\",\"1E3\",\"1E4\",\"1E5\",\"1E6\",\"6E8\"),(0-3),(0-4100),(0-3),(0-1),(0-1)"
#elif (PS_UE_REL_VER <= PS_PTL_VER_R6)
#define CGEQREQ_CMD_PARA_STRING \
    "(1-11),(0-4),(0-2048),(0-16000),(0-2048),(0-16000),(0-2),(0-1520),(\"0E0\",\"1E2\",\"7E3\",\"1E3\",\"1E4\",\"1E5\",\"1E6\",\"1E1\"),(\"0E0\",\"5E2\",\"1E2\",\"5E3\",\"4E3\",\"1E3\",\"1E4\",\"1E5\",\"1E6\",\"6E8\"),(0-3),(0-4100),(0-3),(0-1),(0-1)"
#define CGEQMIN_CMD_PARA_STRING \
    "(1-11),(0-4),(0-2048),(0-16000),(0-2048),(0-16000),(0-2),(0-1520),(\"0E0\",\"1E2\",\"7E3\",\"1E3\",\"1E4\",\"1E5\",\"1E6\",\"1E1\"),(\"0E0\",\"5E2\",\"1E2\",\"5E3\",\"4E3\",\"1E3\",\"1E4\",\"1E5\",\"1E6\",\"6E8\"),(0-3),(0-4100),(0-3),(0-1),(0-1)"
#else
#define CGEQREQ_CMD_PARA_STRING \
    "(1-11),(0-4),(0-11480),(0-42000),(0-11480),(0-42000),(0-2),(0-1520),(\"0E0\",\"1E2\",\"7E3\",\"1E3\",\"1E4\",\"1E5\",\"1E6\",\"1E1\"),(\"0E0\",\"5E2\",\"1E2\",\"5E3\",\"4E3\",\"1E3\",\"1E4\",\"1E5\",\"1E6\",\"6E8\"),(0-3),(0-4100),(0-3),(0-1),(0-1)"
#define CGEQMIN_CMD_PARA_STRING \
    "(1-11),(0-4),(0-11480),(0-42000),(0-11480),(0-42000),(0-2),(0-1520),(\"0E0\",\"1E2\",\"7E3\",\"1E3\",\"1E4\",\"1E5\",\"1E6\",\"1E1\"),(\"0E0\",\"5E2\",\"1E2\",\"5E3\",\"4E3\",\"1E3\",\"1E4\",\"1E5\",\"1E6\",\"6E8\"),(0-3),(0-4100),(0-3),(0-1),(0-1)"
#endif /* PS_UE_REL_VER < PS_PTL_VER_R5 */

#endif /* FEATURE_LTE == FEATURE_ON */

#if (PS_UE_REL_VER < PS_PTL_VER_R5)
#define CGEQREQ_TEST_CMD_PARA_STRING \
    "(0-4),(0-8640),(0-8640),(0-8640),(0-8640),(0-2),(0-1520),(\"0E0\",\"1E2\",\"7E3\",\"1E3\",\"1E4\",\"1E5\",\"1E6\",\"1E1\"),(\"0E0\",\"5E2\",\"1E2\",\"5E3\",\"4E3\",\"1E3\",\"1E4\",\"1E5\",\"1E6\",\"6E8\"),(0-3),(0-4100),(0-3),(0-1),(0-1)"
#define CGEQMIN_TEST_CMD_PARA_STRING \
    "(0-4),(0-8640),(0-8640),(0-8640),(0-8640),(0-2),(0-1520),(\"0E0\",\"1E2\",\"7E3\",\"1E3\",\"1E4\",\"1E5\",\"1E6\",\"1E1\"),(\"0E0\",\"5E2\",\"1E2\",\"5E3\",\"4E3\",\"1E3\",\"1E4\",\"1E5\",\"1E6\",\"6E8\"),(0-3),(0-4100),(0-3),(0-1),(0-1)"

#elif (PS_UE_REL_VER <= PS_PTL_VER_R6)
#define CGEQREQ_TEST_CMD_PARA_STRING \
    "(0-4),(0-2048),(0-16000),(0-2048),(0-16000),(0-2),(0-1520),(\"0E0\",\"1E2\",\"7E3\",\"1E3\",\"1E4\",\"1E5\",\"1E6\",\"1E1\"),(\"0E0\",\"5E2\",\"1E2\",\"5E3\",\"4E3\",\"1E3\",\"1E4\",\"1E5\",\"1E6\",\"6E8\"),(0-3),(0-4100),(0-3),(0-1),(0-1)"
#define CGEQMIN_TEST_CMD_PARA_STRING \
    "(0-4),(0-2048),(0-16000),(0-2048),(0-16000),(0-2),(0-1520),(\"0E0\",\"1E2\",\"7E3\",\"1E3\",\"1E4\",\"1E5\",\"1E6\",\"1E1\"),(\"0E0\",\"5E2\",\"1E2\",\"5E3\",\"4E3\",\"1E3\",\"1E4\",\"1E5\",\"1E6\",\"6E8\"),(0-3),(0-4100),(0-3),(0-1),(0-1)"

#else
#define CGEQREQ_TEST_CMD_PARA_STRING \
    "(0-4),(0-11480),(0-42000),(0-11480),(0-42000),(0-2),(0-1520),(\"0E0\",\"1E2\",\"7E3\",\"1E3\",\"1E4\",\"1E5\",\"1E6\",\"1E1\"),(\"0E0\",\"5E2\",\"1E2\",\"5E3\",\"4E3\",\"1E3\",\"1E4\",\"1E5\",\"1E6\",\"6E8\"),(0-3),(0-4100),(0-3),(0-1),(0-1)"
#define CGEQMIN_TEST_CMD_PARA_STRING \
    "(0-4),(0-11480),(0-42000),(0-11480),(0-42000),(0-2),(0-1520),(\"0E0\",\"1E2\",\"7E3\",\"1E3\",\"1E4\",\"1E5\",\"1E6\",\"1E1\"),(\"0E0\",\"5E2\",\"1E2\",\"5E3\",\"4E3\",\"1E3\",\"1E4\",\"1E5\",\"1E6\",\"6E8\"),(0-3),(0-4100),(0-3),(0-1),(0-1)"
#endif


#if (FEATURE_LTE == FEATURE_ON)
#define NDISDUP_TEST_CMD_PARA_STRING "(1-20),(0,1,2),(apn),(username),(passwd),(0,1,2,3),(ipAddr),(0-63)"
#else
#define NDISDUP_TEST_CMD_PARA_STRING "(1-16),(0,1,2),(apn),(username),(passwd),(0,1,2,3),(ipAddr),(0-63)"
#endif


#if (FEATURE_LTE == FEATURE_ON)
#define NDISCONN_TEST_CMD_PARA_STRING "(1-20),(0,1),(apn),(username),(passwd),(0-65535)"
#else
#define NDISCONN_TEST_CMD_PARA_STRING "(1-16),(0,1),(apn),(username),(passwd),(0-65535)"
#endif

#if (FEATURE_LTE == FEATURE_ON)
#define DNSQUERY_TEST_CMD_PARA_STRING "(1-31)"
#else
#define DNSQUERY_TEST_CMD_PARA_STRING "(1-11)"
#endif /* FEATURE_LTE == FEATURE_ON */

#if (FEATURE_LTE == FEATURE_ON)
#if (MULTI_MODEM_NUMBER >= 2)
#if (MULTI_MODEM_NUMBER == 3)
#define CHDATA_TEST_CMD_PARA_STRING "(1-31),(1-12)"
#else
#define CHDATA_TEST_CMD_PARA_STRING "(1-31),(1-10)"
#endif
#else
#define CHDATA_TEST_CMD_PARA_STRING "(1-31),(1-8)"
#endif
#else
#if (MULTI_MODEM_NUMBER >= 2)
#if (MULTI_MODEM_NUMBER == 3)
#define CHDATA_TEST_CMD_PARA_STRING "(1-11),(1-12)"
#else
#define CHDATA_TEST_CMD_PARA_STRING "(1-11),(1-10)"
#endif
#else
#define CHDATA_TEST_CMD_PARA_STRING "(1-11),(1-8)"
#endif
#endif /* FEATURE_LTE == FEATURE_ON */

#if (FEATURE_LTE == FEATURE_ON)
#define PDPROFMOD_CMD_PARA_STRING "(1-31),(\"IP\",\"IPV6\",\"IPV4V6\",\"\"),(APN),(username),(passwd),(0-2)"
#else
#define PDPROFMOD_CMD_PARA_STRING "(1-11),(\"IP\",\"IPV6\",\"IPV4V6\",\"\"),(APN),(username),(passwd),(0-2)"
#endif /* FEATURE_LTE == FEATURE_ON */

#if ((FEATURE_LTE == FEATURE_ON) && (FEATURE_LTE_MBMS == FEATURE_ON))
#define MBMSCMD_CMD_PARA_STRING \
    "(\"MBMS_SERVICE_ENABLER\",\"ACTIVATE\",\"DEACTIVATE\",\"DEACTIVATE_ALL\",\"MBMS_PREFERENCE\",\"SIB16_GET_NETWORK_TIME\",\"BSSI_SIGNAL_LEVEL\",\"NETWORK_INFORMATION\",\"MODEM_STATUS\"),(@paramone),(paramtwo)"
#endif

#if (FEATURE_IMS == FEATURE_ON)
#define SMSDOMAIN_CMD_PARA_STRING "(0,1)"
#else
#define SMSDOMAIN_CMD_PARA_STRING "(0)"
#endif /* FEATURE_IMS == FEATURE_ON */

#if (MULTI_MODEM_NUMBER == 3)
#define SCICHG_CMD_PARA_STRING "(0-2),(0-2),(0-2)"
#else
#define SCICHG_CMD_PARA_STRING "(0-2),(0-2)"
#endif

#if (FEATURE_UE_MODE_NR == FEATURE_OFF)
#if (FEATURE_LTEV == FEATURE_ON)
#define FCHAN_CMD_PARA_STRING "(0-10),(0-255),(0-4294967295),(0-1)" /* 扩充LTE-V后，第一个参数范围增加到10 */
#else
#define FCHAN_CMD_PARA_STRING "(0-7),(0-255),(0-4294967295),(0-1)"
#endif
#define FWAVE_CMD_PARA_STRING "(0-7),(0-65535)"
#define FPA_CMD_PARA_STRING "(0-255)"
#define FTXON_CMD_PARA_STRING "(0,1,2)"
#define TSELRF_CMD_PARA_STRING "(0-255),(0-255)"
#define DPDT_CMD_PARA_STRING "(0-4),(0-65535)"
#define DPDT_QRY_PARA_STRING "(0-4)"
#define DPDT_TEST_CMD_PATA_STRING "(0-4),(0-65535)"
#define LOWPWRMODE_CMD_PARA_STRING "(0)"
#define PLMNSRCH_CMD_PARA_STRING "(0,1),(@oper),(0,2,7),(0,1,2),(44-141)"
#else
#if (FEATURE_LTEV == FEATURE_ON)
#define FCHAN_CMD_PARA_STRING "(0-10),(0-65535),(0-4294967295),(0-20),(0-4)" /* 扩充LTE-V后，第一个参数范围增加到10 */
#else
#define FCHAN_CMD_PARA_STRING "(0-9),(0-65535),(0-4294967295),(0-20),(0-4)"
#endif
#define FWAVE_CMD_PARA_STRING "(0-8),(0-65535),(0-4)"
#define FPA_CMD_PARA_STRING "(0-3)"
#define FTXON_CMD_PARA_STRING "(0,1)"
#define TSELRF_CMD_PARA_STRING "(1-18),(0,1),(1-3),(1-8)"
#define DPDT_CMD_PARA_STRING "(0-5),(0-65535),(0,1)"
#define DPDT_QRY_PARA_STRING "(0-5),(0,1)"
#define DPDT_TEST_CMD_PATA_STRING "(0-5),(0-65535)"
#define LOWPWRMODE_CMD_PARA_STRING "(0,1)"
#define PLMNSRCH_CMD_PARA_STRING "(0,1),(@oper),(0,2,7,12),(0,1,2),(31-156)"
#endif

#define AT_SET_SLT_TEST_TYPF "(8,9)"

#if (FEATURE_UE_MODE_NR == FEATURE_ON)
#define NETSCAN_CMD_PARA_STRING "(1-20),(@Power),(0-4),(@Band)"
#else
#define NETSCAN_CMD_PARA_STRING "(1-20),(@Power),(0-2),(@Band)"
#endif

#define ROAMPDPTYPE_CMD_PARA_STRING "(0),(\"IP\",\"IPV6\",\"IPV4V6\",\"PPP\",\"\")"
#define RMNETCFG_CMD_PARA_STRING "(0-1),(rmnetname),(0-64)"

/*
 * 命令表元素定义
 *   --------------------ulChkFlag
 *  | bit31......bit4 |    bit3    |    bit2    |    bit1    |    bit0    |
 *  |       保留      |CLAC是否显示|E5 DOCK命令 |SIM锁定限制 | E5密码保护 |
 */
/*lint -e958 ;cause:64bit*/
typedef struct {
    VOS_UINT32 cmdIndex;

    PFN_AT_FW_CMD_PROC setProc;
    VOS_UINT32         setTimeOut;

    PFN_AT_FW_CMD_PROC qryProc;
    VOS_UINT32         qryTimeOut;

    PFN_AT_FW_CMD_PROC testProc;
    VOS_UINT32         testTimeOut;

    PFN_AT_FW_CMD_PROC abortProc;    /* 打断函数 */
    VOS_UINT32         abortTimeOut; /* 打断定时器 */

    VOS_UINT32 paramErrCode; /* 解析参数失败时的错误码 */
    VOS_UINT32 chkFlag;

    const VOS_UINT8 *cmdName;
    const VOS_UINT8 *param;
} AT_ParCmdElement;
/*lint +e958 ;cause:64bit*/

/* SMS命令脚本类型 */
/*lint -e958 -e959 ;cause:64bit*/
typedef struct {
    VOS_UINT32 cmdIndex;

    PFN_AT_FW_CMD_PROC setProc;
    VOS_UINT32         setTimeOut;

    PFN_AT_FW_CMD_PROC testProc;
    VOS_UINT32         testTimeOut;

    PFN_AT_FW_CMD_PROC abortProc;
    VOS_UINT32         abortTimeOut;

    VOS_UINT32 paramErrCode; /* 解析参数失败时的错误码 */
    VOS_UINT32 chkFlag;

    const VOS_UINT8 *cmdName;
    const VOS_UINT8 *paraText; /* 文本参数脚本 */
    const VOS_UINT8 *paraPDU;  /* PDU参数脚本 */
} AT_SMS_CmdTab;
/*lint +e958 +e959 ;cause:64bit*/

typedef struct tagAT_PAR_CMDTBL_LIST_STRU {
    VOS_UINT16        cmdNum;
    VOS_UINT16        reserved;
    VOS_UINT8         reserved1[4];
    AT_ParCmdElement *cmdElement;
    HI_LIST_S         cmdTblList;
} AT_ParCmdtblList;

/*lint -e958 -e959 ;cause:64bit*/
typedef struct {
    VOS_UINT8 clientStatus; /* AT_FW_CLIENT_STATUS_READY/PEND */

    VOS_UINT8 mode; /* AT_CMD_MODE/AT_SMS_MODE  */

    VOS_UINT16 reserved1;

    VOS_UINT16 dataLen;    /* 指示当前AT命令缓存长度 */
    VOS_UINT16 cmdLineLen; /* CMD line缓存buffer长度 */

    VOS_UINT8 dataBuff[AT_CMD_MAX_LEN]; /* 指示当前AT命令缓存区 */

    VOS_UINT8 *cmdLine; /* CMD line缓存buffer，用于"A/"重复执行上一条命令 */

    AT_FW_CombineCmdInfo combineCmdInfo; /* 组合命令信息记录 */

    VOS_UINT8 *blockCmd;    /* 被阻塞的命令的缓存区 */
    VOS_UINT16 blockCmdLen; /* 被阻塞的命令的缓存长度 */

    VOS_UINT16 reserved2;

    AT_ParCmdElement *cmdElement;

    HTIMER timer;
} AT_ParseContext;
/*lint +e958 +e959 ;cause:64bit*/

#define AT_PARA_MAX_NUM AT_MAX_PARA_NUMBER

/* AT^SIMLOCKWRITEEX命令一次写入<simlockdata>的最大长度 */
#define AT_SIMLOCKDATA_PER_WRITE_MAX_LEN 1400

/* extern HI_LIST_S g_cmdTblList; */

extern TAF_UINT32 At_UpString(TAF_UINT8 *data, TAF_UINT16 len);
extern TAF_UINT32 At_Auc2ul(TAF_UINT8 *nptr, TAF_UINT16 len, TAF_UINT32 *rtn);

extern AT_PARSECMD      g_atParseCmd;
extern AT_ParseContext  g_parseContext[AT_MAX_CLIENT_NUM];
extern AT_ParseParaType g_atParaList[AT_MAX_PARA_NUMBER];
extern TAF_UINT8        g_atParaIndex;

/* 框架核心接口 */
extern VOS_UINT32 AT_RegisterCmdTable(const AT_ParCmdElement *cmdTblEntry, VOS_UINT16 cmdNum);

extern VOS_UINT32 atParseExtendCmd(VOS_UINT8 *data, VOS_UINT16 len);

extern VOS_UINT32 ParseDCmdPreProc(VOS_UINT8 *data, VOS_UINT16 len);

extern VOS_UINT32 atParseSCmd(VOS_UINT8 *data, VOS_UINT16 len);

extern VOS_UINT32 atParseBasicCmd(VOS_UINT8 *data, VOS_UINT16 len);

extern VOS_UINT32 atParsePara(VOS_UINT8 *data, VOS_UINT16 len);

extern VOS_UINT32 atParseDMCmd(VOS_UINT8 *data, VOS_UINT16 len);

extern VOS_UINT32 At_CombineCmdChkProc(VOS_UINT8 clientId, VOS_UINT8 *dataIn, VOS_UINT16 lenIn);

extern VOS_UINT32 CmdParseProc(VOS_UINT8 clientId, VOS_UINT8 *dataIn, VOS_UINT16 lenIn);

extern VOS_UINT32 AT_ParseCmdType(VOS_UINT8 *data, VOS_UINT16 len);

extern VOS_UINT32 atMatchCmdName(VOS_UINT8 clientId, VOS_UINT32 cmdType);

extern VOS_VOID At_ResetCombinCmdInfo(HI_LIST_S *combList);

extern VOS_VOID At_ResetCombinParseInfo(VOS_UINT8 index);

extern VOS_UINT32 At_CombineCmdProc(VOS_UINT8 clientId);

extern VOS_VOID At_ParseInit(VOS_VOID);

extern VOS_VOID AT_ParseCmdOver(VOS_UINT8 index);

extern VOS_VOID AT_CheckProcBlockCmd(VOS_VOID);

extern VOS_UINT8* At_GetFirstBasicCmdAddr(VOS_UINT8 *data, VOS_UINT32 *len);

extern VOS_VOID AT_BlockCmdTimeOutProc(REL_TimerMsgBlock *msg);

VOS_UINT32 AT_IsAbortCmdStr(VOS_UINT8 index, VOS_UINT8 *data, VOS_UINT16 len);

VOS_VOID AT_AbortCmdProc(VOS_UINT8 index);

VOS_VOID AT_SaveCmdElementInfo(VOS_UINT8 index, VOS_UINT8 *cmdName, VOS_UINT32 cmdType);

VOS_VOID AT_ClearBlockCmdInfo(VOS_UINT8 index);

VOS_UINT32 AT_IsAnyParseClientPend(VOS_VOID);

VOS_UINT32 AT_IsAllClientDataMode(VOS_VOID);

extern VOS_UINT8 atCmdIsSupportedByCLMode(VOS_UINT8 index);
#if (FEATURE_UE_MODE_CDMA == FEATURE_ON)
extern VOS_UINT8 atCmdIsSupportedByGULMode(VOS_UINT8 index);
#endif

#if (FEATURE_IOT_ATNLPROXY == FEATURE_ON)
#if (FEATURE_AT_CMD_TRUST_LIST == FEATURE_ON)
extern AT_ParCmdElement* AT_GetAppAtListTbl(VOS_VOID);
extern VOS_UINT32 AT_GetAppAtCount(VOS_VOID);
#endif
#endif

#pragma pack(pop)

#ifdef __cplusplus
#if __cplusplus
}
#endif
#endif

#endif /* __ATPARSE_H__ */
