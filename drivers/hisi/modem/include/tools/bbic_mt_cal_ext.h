/*
 * Huawei Technologies Sweden AB (C), 2001-2019
 * @author    Automatically generated by DAISY
 * @version
 * @date      2017-04-28 15:27:40
 * @file
 * @brief
 * @copyright Huawei Technologies Sweden AB
 */
#ifndef BBIC_MT_CAL_EXT_H
#define BBIC_MT_CAL_EXT_H

/*
 * 1. Other files included
*/
#include "vos.h"
#include "bbic_cal_comm_ext.h"

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */
#pragma pack(push, 4)

/*
 * 2. Macro definitions
 */

/*
 * 3. Enumerations declarations
 */


typedef struct {
    VOS_UINT8                       ucTxEnable;     /* 1--Tx enable, 0--Tx Disable,对应FTXON的参数<switch> */
    VOS_UINT8                       ucIsSingleTone; /* 是否是单音，VOS_TRUE:表示单音， VOS_FALSE: 表示调制 */
    VOS_UINT8                       ucTxPaMode;     /* PA Mode, 对应^PFA命令中的参数<level> */
    NR_SCS_TYPE_COMM_ENUM_UINT8     enScsType;      /* 子载波间隔，对应^FCHAN 命令中的<对应^FCHAN 命令中的<band_width> */
    VOS_UINT16                      usMrxEanble;    /* Mrx Enable, 1--Enable, 0--Disable,需要测度FPOWDET,默认为enable, */
    /* Mimo配置,目前仅在MT使用:1 - 1T/1R, 2 - 2T/2R, 4 - 4R, 8 - 8R， 对应^TSELRF中的参数<mimo_type> */
    VOS_UINT16 usMimoType;
    VOS_UINT16                usAntMap; /* 表示第几根天线，若是单天线，则默认写1,对应^TSELRF中的参数<group> */
    /* 调制波形，对应^FWAVE命令中的<type>，单音时，若是GSM，则填GMSK，若是EDGE，则是8PSK */
    MODU_TYPE_ENUM_UINT16 enModType;
    MODEM_ID_ENUM_UINT16       enModemId;       /* Modem Id, 目前默认为modem0 */
    RAT_MODE_ENUM_UINT16       enRatMode;       /* Rat Mode, 对应^FCHAN 命令中的<mode> */
    BAND_ENUM_UINT16           enBand;          /* Band No., 对应^FCHAN 命令中的<band> */
    BANDWIDTH_ENUM_UINT16          enBandWith;      /* BandWidth, 对应^FCHAN 命令中的<band_width> */
    VOS_UINT32                     ulFreqInfo;      /* Rx/Tx的频率，通过^FCHAN 命令中的<channel>转换过来 */
    POWER_CTRL_MODE_ENUM_UINT8     enPowerCtrlMode; /* < Power Ctrl Mode */

    VOS_UINT8                      rbCfgEnable;     /* 1--RB config enable, 0--RB config disable,对应XXX<XXX> */
    VOS_UINT16                     rbNumCfg;        /* Config RB number,对应XXX<XXX> */
    VOS_UINT16                     rbStartCfg;      /* Config RB start point,对应XXX<XXX> */
    VOS_UINT8                      ucRsv[2];        /* 预留位，对齐 */
    TX_POWER_CFG_UNION         unPowerPara;
} BBIC_CAL_MT_TX_REQ_PARA;

typedef struct {
    VOS_UINT8                       ucTxEnable;     /* 1--Tx enable, 0--Tx Disable,对应FTXON的参数<switch> */
    VOS_UINT8                       ucIsSingleTone; /* 是否是单音，VOS_TRUE:表示单音， VOS_FALSE: 表示调制 */
    VOS_UINT8                       ucTxPaMode;     /* PA Mode, 对应^PFA命令中的参数<level> */
    NR_SCS_TYPE_COMM_ENUM_UINT8     enScsType;      /* 子载波间隔，对应^FCHAN 命令中的<对应^FCHAN 命令中的<band_width> */
    VOS_UINT16                      usMrxEanble;    /* Mrx Enable, 1--Enable, 0--Disable,需要测度FPOWDET,默认为enable, */
    /* Mimo配置,目前仅在MT使用:1 - 1T/1R, 2 - 2T/2R, 4 - 4R, 8 - 8R， 对应^TSELRF中的参数<mimo_type> */
    VOS_UINT16 usMimoType;
    VOS_UINT16                usAntMap; /* 表示第几根天线，若是单天线，则默认写1,对应^TSELRF中的参数<group> */
    /* 调制波形，对应^FWAVE命令中的<type>，单音时，若是GSM，则填GMSK，若是EDGE，则是8PSK */
    MODU_TYPE_ENUM_UINT16 enModType;
    MODEM_ID_ENUM_UINT16       enModemId;       /* Modem Id, 目前默认为modem0 */
    RAT_MODE_ENUM_UINT16       enRatMode;       /* Rat Mode, 对应^FCHAN 命令中的<mode> */
    BAND_ENUM_UINT16           enBand;          /* Band No., 对应^FCHAN 命令中的<band> */
    BANDWIDTH_ENUM_UINT16      enBandWith;      /* BandWidth, 对应^FCHAN 命令中的<band_width> */
    VOS_UINT32                 ulFreqInfo;      /* Rx/Tx的频率，通过^FCHAN 命令中的<channel>转换过来 */
    POWER_CTRL_MODE_ENUM_UINT8 enPowerCtrlMode; /* < Power Ctrl Mode */

    VOS_UINT8                  ucRsv[3];        /* 预留位，对齐 */
    TX_POWER_CFG_UNION         unPowerPara;
} BBIC_CAL_DCXO_MT_TX_REQ_PARA;

typedef struct {
    VOS_UINT32 errorCode;    /* 错误码 */
    VOS_UINT32 mrxCorrValue; /* MRX线性值 */
    VOS_INT16  antPower;     /* 天线口对应的功率值，单位GUC 0.1db，L/NR: 1/8db */
    VOS_INT16  rsv;          /* 四字节对齐 */
} BBIC_CAL_MT_TX_PD_IND_PARA;


typedef struct {
    VOS_UINT8                 ucRxEnable; /* 1--Rx enable, 0--Rx Disable */
    VOS_UINT8                 ucRev;
    VOS_UINT16                uhwAgcGainIndex; /* 对应^FAGCGAIN命令的<level> */
    MODEM_ID_ENUM_UINT16  enModemId;       /* Modem Id, 目前默认为modem0 */
    RAT_MODE_ENUM_UINT16  enRatMode;       /* Rat Mode, 对应^FCHAN 命令中的<mode> */
    BAND_ENUM_UINT16      enBand;          /* Band No., 对应^FCHAN 命令中的<band> */
    BANDWIDTH_ENUM_UINT16 enBandWith;      /* BandWidth, 对应^FCHAN 命令中的<band_width> */
    /* Mimo配置,目前仅在MT使用:1 - 1T/1R, 2 - 2T/2R, 4 - 4R, 8 - 8R， 对应^TSELRF中的参数<mimo_type> */
    VOS_UINT16 usMimoType;
    VOS_UINT16 usAntMap;   /* 表示第几根天线，若是单天线，则默认写1,对应^TSELRF中的参数<group> */
    VOS_UINT32 dlFreqInfo; /* Rx/Tx的频率，通过^FCHAN 命令中的<channel>转换过来 */
} BBIC_CAL_MT_RX_REQ_PARA;

/*
 * Description: RX Rssi Ind
 */
typedef struct {
    VOS_UINT32 errorCode;
    VOS_INT16  rssi[RFHAL_CAL_MAX_ANT_NUM];
} BBIC_CAL_MT_RX_RSSI_IND_PARA;

/*
 * 结构说明: AT 发给BBIC的RX REQ消息
 */
typedef struct {
    VOS_MSG_HEADER
    BBIC_CAL_COMPONENT_ID_STRU stComponentID;
    BBIC_CAL_MT_RX_REQ_PARA    stMtRxPara;
} AT_BBIC_CAL_MT_RX_REQ;

typedef struct {
    VOS_MSG_HEADER
    BBIC_CAL_COMPONENT_ID_STRU stComponentID;
    /* Need to nothing */
} AT_BBIC_CAL_MT_RX_RSSI_REQ;


typedef struct {
    VOS_MSG_HEADER
    BBIC_CAL_COMPONENT_ID_STRU   stComponentID;
    BBIC_CAL_MT_RX_RSSI_IND_PARA mtRxIndPara;
} BBIC_CAL_AT_MT_RX_RSSI_IND;


typedef struct {
    VOS_MSG_HEADER
    BBIC_CAL_COMPONENT_ID_STRU stComponentID;
    VOS_UINT32                 ulErrCode; /* 0表示成功，非0表示失败 */
} BBIC_CAL_AT_MT_TRX_CNF;


typedef struct {
    VOS_MSG_HEADER
    BBIC_CAL_COMPONENT_ID_STRU stComponentID;
    BBIC_CAL_MT_TX_REQ_PARA    stMtTxPara;
} AT_BBIC_CAL_MT_TX_REQ;


typedef struct {
    VOS_MSG_HEADER
    BBIC_CAL_COMPONENT_ID_STRU     stComponentID;
    BBIC_CAL_DCXO_MT_TX_REQ_PARA   stDcxoTxPara;
} BBIC_CAL_DCXO_TX_REQ;


typedef struct {
    VOS_MSG_HEADER
    BBIC_CAL_COMPONENT_ID_STRU stComponentID;
    VOS_UINT32                 ulErrCode; /* 0表示成功，非0表示失败 */
} BBIC_CAL_AT_MT_TX_CNF;


typedef struct {
    VOS_MSG_HEADER
    BBIC_CAL_COMPONENT_ID_STRU stComponentID;
    BBIC_CAL_MT_TX_PD_IND_PARA mtTxIndPara;
} BBIC_CAL_AT_MT_TX_PD_IND;

typedef struct {
    VOS_MSG_HEADER
    BBIC_CAL_COMPONENT_ID_STRU       stComponentID;
    BBIC_CAL_RF_DEBUG_G_TX_PARA_STRU stPara;
} BBIC_CAL_RF_DEBUG_GSM_TX_REQ_STRU;

typedef struct {
    VOS_MSG_HEADER
    BBIC_CAL_COMPONENT_ID_STRU              stComponentID;
    BBIC_CAL_RF_DEBUG_GTX_MRX_IND_PARA_STRU stPara;
} BBIC_CAL_RF_DEBUG_GTX_MRX_IND_STRU;

/*
 * 7. OTHER declarations
 */

/*
 * 8. Global  declaration
 */

/*
 * 9. Function declarations
 */

#pragma pack(pop)

#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif

