/*
 * Copyright (c) Hisilicon Technologies Co., Ltd. 2019-2020. All rights reserved.
 * Description: protocol_as.h.
 * Author: Huawei
 * Create: 2019/11/05
 */

#ifndef __PROTOCOL_AS_H
#define __PROTOCOL_AS_H

#ifndef CONFIG_INPUTHUB_AS
#include <linux/types.h>
#include "protocol.h"
#define CMD_ALL 0xff
#else

/* since some module directly include protoco.h and contexthub_route.h, and
 * use obj-y to build in, such as hisi_aod_device.c
 * we currently use __PROTOCOL_H to avoid protocol redefinition
 */
#ifndef __PROTOCOL_H
#define __PROTOCOL_H

#include "iomcu_log.h"
#include "protocol_ext.h"

/* --------------------------tag-------------------------- */
typedef enum {
	TAG_FLUSH_META,
	TAG_BEGIN = 0x01,
	TAG_SENSOR_BEGIN = TAG_BEGIN,
	TAG_DEVICE_BEGIN = TAG_SENSOR_BEGIN,
	TAG_ACCEL = TAG_SENSOR_BEGIN,
	TAG_GYRO,
	TAG_MAG,
	TAG_ALS,
	TAG_PS, /* 5 */
	TAG_LINEAR_ACCEL,
	TAG_GRAVITY,
	TAG_ORIENTATION,
	TAG_ROTATION_VECTORS,
	TAG_PRESSURE, /* 0x0a = 10 */
	TAG_HALL,
	TAG_MAG_UNCALIBRATED,
	TAG_GAME_RV,
	TAG_GYRO_UNCALIBRATED,
	TAG_SIGNIFICANT_MOTION, /* 0x0f = 15 */
	TAG_STEP_DETECTOR,
	TAG_STEP_COUNTER,
	TAG_GEOMAGNETIC_RV,
	TAG_HANDPRESS,
	TAG_FINGERSENSE, /* 0x14 = 20 */
	TAG_PHONECALL,
	TAG_CONNECTIVITY,
	TAG_OIS,
	TAG_TILT_DETECTOR,
	TAG_RPC, /* 0x19 = 25 should same with modem definition */
	TAG_CAP_PROX,
	TAG_MAGN_BRACKET,
	TAG_AGT,
	TAG_COLOR,
	TAG_ACCEL_UNCALIBRATED, /* 0x1e = 30 */
	TAG_POSTURE,
	TAG_DUMMY_DS1 = 40,
	TAG_DUMMY_AS1 = 41,
	TAG_DUMMY_AS2 = 42,
	TAG_DUMMY_AS3 = 43,
	TAG_AUX_END = 44,
	TAG_SENSOR_END = TAG_AUX_END, /* sensor end should < 45 */
	TAG_DEVICE_END = TAG_SENSOR_END,
	TAG_HW_PRIVATE_APP_START = 45, /* 45 */
	TAG_AR = TAG_HW_PRIVATE_APP_START,
	TAG_MOTION,
	TAG_CONNECTIVITY_AGENT,
	TAG_PDR,
	TAG_CA,
	TAG_FP, /* 0x32 = 50 */
	TAG_KEY,
	TAG_AOD,
	TAG_FLP,
	TAG_ENVIRONMENT,
	TAG_LOADMONITOR, /* 0x37 = 55 */
	TAG_APP_CHRE,
	TAG_FP_UD,
	TAG_THP,
	/* APP_END should < 64, because power log used bitmap */
	TAG_HW_PRIVATE_APP_END,
	TAG_MODEM = 128, /* 0x80 = 128 */
	TAG_TP,
	TAG_SPI,
	TAG_I2C,
	TAG_UART,
	TAG_RGBLIGHT,
	TAG_BUTTONLIGHT,
	TAG_BACKLIGHT, /* 0x86 = 135 */
	TAG_VIBRATOR,
	TAG_SYS,
	TAG_LOG,
	TAG_LOG_BUFF,
	TAG_RAMDUMP, /* 0x8b = 140 */
	TAG_FAULT,
	TAG_SHAREMEM,
	TAG_SHELL_DBG,
	TAG_PD,
	TAG_I3C, /* 0x90 = 145 */
	TAG_DATA_PLAYBACK,
	TAG_CHRE,
	TAG_SENSOR_CALI,
	TAG_CELL,
	TAG_BIG_DATA,
	TAG_SWING,
	TAG_SWING_DBG,
	TAG_KB,
	TAG_SWING_CAM,
	TAG_DFT = 156,
	TAG_TIMESTAMP = 157,
	TAG_PEDOMETER,
	TAG_AMF = 0xFE,
	TAG_END = 0xFF
} obj_tag_t;

/* --------------------------cmd-------------------------- */
typedef enum {
	CMD_CMN_OPEN_REQ = 0x01,
	CMD_CMN_OPEN_RESP,
	CMD_CMN_CLOSE_REQ,
	CMD_CMN_CLOSE_RESP,
	CMD_CMN_INTERVAL_REQ,
	CMD_CMN_INTERVAL_RESP,
	CMD_CMN_CONFIG_REQ,
	CMD_CMN_CONFIG_RESP,
	CMD_CMN_FLUSH_REQ,
	CMD_CMN_FLUSH_RESP,
	CMD_CMN_IPCSHM_REQ,
	CMD_CMN_IPCSHM_RESP,

	CMD_CMN_GET_STATUS_REQ,
	CMD_CMN_GET_STATUS_RESP,
	CMD_CMN_CMD_SET_REQ,
	CMD_CMN_CMD_SET_RESP,

	CMD_DATA_REQ = 0x1f,
	CMD_DATA_RESP,

	CMD_SET_FAULT_TYPE_REQ, /* 0x21 */
	CMD_SET_FAULT_TYPE_RESP,
	CMD_SET_FAULT_ADDR_REQ,
	CMD_SET_FAULT_ADDR_RESP,

	/* SPI */
	CMD_SPI_BAUD_REQ, /* 0x25 */
	CMD_SPI_BAUD_RESP,
	CMD_SPI_TRANS_REQ,
	CMD_SPI_TRANS_RESP,

	/* I2C */
	CMD_I2C_TRANS_REQ, /* 0x29 */
	CMD_I2C_TRANS_RESP,

	/* system status */
	CMD_SYS_STATUSCHANGE_REQ, /* 0x2b */
	CMD_SYS_STATUSCHANGE_RESP,
	CMD_SYS_DYNLOAD_REQ,
	CMD_SYS_DYNLOAD_RESP,
	CMD_SYS_HEARTBEAT_REQ,
	CMD_SYS_HEARTBEAT_RESP,
	CMD_SYS_LOG_LEVEL_REQ,
	CMD_SYS_LOG_LEVEL_RESP,
	CMD_SYS_CTS_RESTRICT_MODE_REQ,
	CMD_SYS_CTS_RESTRICT_MODE_RESP,

	/* LOG */
	CMD_LOG_REPORT_REQ = 0x35, /* 0x35 */
	CMD_LOG_REPORT_RESP,
	CMD_LOG_CONFIG_REQ,
	CMD_LOG_CONFIG_RESP,
	CMD_LOG_POWER_REQ,
	CMD_LOG_POWER_RESP,

	/* SHAREMEM */
	CMD_SHMEM_AP_RECV_REQ, /* 0x3b */
	CMD_SHMEM_AP_RECV_RESP,
	CMD_SHMEM_AP_SEND_REQ,
	CMD_SHMEM_AP_SEND_RESP,

	/* tag modem for cell info */
	CMD_MODEM_CELL_INFO_REQ, /* 0x3f */
	CMD_MODEM_CELL_INFO_RESP,
	CMD_MODEM_REBOOT_NOTIFY_REQ,
	CMD_MODEM_REBOOT_NOTIFY_RESP,

	/* SHELL_DBG */
	CMD_SHELL_DBG_REQ, /* 0x43 */
	CMD_SHELL_DBG_RESP,

	/* LoadMonitor */
	CMD_READ_AO_MONITOR_SENSOR, /* 0x45 */
	CMD_READ_AO_MONITOR_SENSOR_RESP,

	/* TAG_DATA_PLAYBACK */
	CMD_DATA_PLAYBACK_DATA_READY_REQ, /* 0x47 BACKPLAY*/
	CMD_DATA_PLAYBACK_DATA_READY_RESP,
	CMD_DATA_PLAYBACK_BUF_READY_REQ, /* RECORD */
	CMD_DATA_PLAYBACK_BUF_READY_RESP,

	/* CHRE */
	CMD_CHRE_AP_SEND_TO_MCU, /* 0x4b */
	CMD_CHRE_AP_SEND_TO_MCU_RESP,
	CMD_CHRE_MCU_SEND_TO_AP,
	CMD_CHRE_MCU_SEND_TO_AP_RESP,

	/* BIG DATA */
	CMD_BIG_DATA_REQUEST_DATA, /* 0x4f */
	CMD_BIG_DATA_REQUEST_DATA_RESP,
	CMD_BIG_DATA_SEND_TO_AP, /* 0x51 */
	CMD_BIG_DATA_SEND_TO_AP_RESP, /* 0x52 */

	/* tag sys for hall status */
	CMD_SYS_HALL_STATUS_REQ = 0x53, /* 0x53 */
	CMD_SYS_HALL_STATUS_RESP = 0x54, /* 0x54 */

	/* tag modem for phonecall status */
	CMD_MODEM_PHONECALL_INFO_REQ = 0x55, /* 0x55 */
	CMD_MODEM_PHONECALL_INFO_RESP = 0x56, /* 0x56 */

	/* I3C */
	CMD_I3C_TRANS_REQ = 0x57,
	CMD_I3C_TRANS_RESP,

	/*DFT*/
	CMD_DFT_REQUEST_DATA = 0x61,// 0x61
	CMD_DFT_REQUEST_DATA_RESP,
	CMD_DFT_FLUSH,
	CMD_DFT_FLUSHP,

	/* log buff */
	CMD_LOG_SER_REQ = 0xf1,
	CMD_LOG_USEBUF_REQ,
	CMD_LOG_BUFF_ALERT,
	CMD_LOG_BUFF_FLUSH,
	CMD_LOG_BUFF_FLUSHP,
	CMD_EXT_LOG_FLUSH,
	CMD_EXT_LOG_FLUSHP,

	CMD_SYS_TIMESTAMP_REQ = 0xF8,
	CMD_SYS_TIMESTAMP_RESP = 0xF9,

	/* modem mode */
	CMD_MODEM_MODE_REQ = 0xFA,
	CMD_MODEM_MODE_RESP,

	CMD_SYS_TIMEZONE_REQ,
	CMD_SYS_TIMEZONE_RESP,

	/* max cmd */
	CMD_ERR_RESP = 0xfe,
	CMD_ALL = 0xff,
} obj_cmd_t;

typedef enum {
	SUB_CMD_NULL_REQ = 0x0,
	SUB_CMD_SELFCALI_REQ = 0x01,
	SUB_CMD_SET_PARAMET_REQ,
	SUB_CMD_SET_OFFSET_REQ,
	SUB_CMD_SELFTEST_REQ,
	SUB_CMD_CALIBRATE_DATA_REQ,
	SUB_CMD_SET_SLAVE_ADDR_REQ,
	SUB_CMD_SET_RESET_PARAM_REQ,
	SUB_CMD_ADDITIONAL_INFO,
	SUB_CMD_FW_DLOAD_REQ,
	SUB_CMD_FLUSH_REQ,
	SUB_CMD_SET_ADD_DATA_REQ, /* 11 */
	SUB_CMD_SET_DATA_TYPE_REQ, /* 12 */
	SUB_CMD_SET_DATA_MODE = 0x0d, /* 13 */
	SUB_CMD_SET_TP_COORDINATE, /* 14 */
	SUB_CMD_SET_WRITE_NV_ATTER_SALE = SUB_CMD_SET_TP_COORDINATE,

	/* als */
	SUB_CMD_SET_ALS_PA = 0x20,
	SUB_CMD_UPDATE_BL_LEVEL,
	SUB_CMD_UPDATE_RGB_DATA,
	SUB_CMD_GET_FACTORY_PARA,
	SUB_CMD_CHANGE_DC_STATUS,
	SUB_CMD_CHANGE_ALWAYS_ON_STATUS,

	/* motion */
	SUB_CMD_MOTION_ATTR_ENABLE_REQ = 0x20,
	SUB_CMD_MOTION_ATTR_DISABLE_REQ,
	SUB_CMD_MOTION_REPORT_REQ,
	SUB_CMD_MOTION_HORIZONTAL_PICKUP_REQ = 0x23,

	/* ca */
	SUB_CMD_CA_ATTR_ENABLE_REQ = 0x20,
	SUB_CMD_CA_ATTR_DISABLE_REQ,
	SUB_CMD_CA_REPORT_REQ,

	/* fingerprint */
	SUB_CMD_FINGERPRINT_OPEN_REQ = 0x20,
	SUB_CMD_FINGERPRINT_CLOSE_REQ,
	SUB_CMD_FINGERPRINT_CONFIG_SENSOR_DATA_REQ,
	SUB_CMD_FINGERPRINT_CONFIG_DEBUG_EVENT_REQ,

	/* gyro */
	SUB_CMD_GYRO_OIS_REQ = 0x20,
	SUB_CMD_GYRO_TMP_OFFSET_REQ,

	/* finger sense */
	SUB_CMD_ACCEL_FINGERSENSE_ENABLE_REQ = 0x20,
	SUB_CMD_ACCEL_FINGERSENSE_CLOSE_REQ,
	SUB_CMD_ACCEL_FINGERSENSE_REQ_DATA_REQ,
	SUB_CMD_ACCEL_FINGERSENSE_DATA_REPORT,
	SUB_CMD_TOUCH_FINGERSENSE_MAIN_SCREEN,
	SUB_CMD_TOUCH_FINGERSENSE_ASSIT_SCREEN,

	/* tag pdr */
	SUB_CMD_FLP_PDR_START_REQ = 0x20,
	SUB_CMD_FLP_PDR_STOP_REQ,
	SUB_CMD_FLP_PDR_WRITE_REQ,
	SUB_CMD_FLP_PDR_UPDATE_REQ,
	SUB_CMD_FLP_PDR_FLUSH_REQ,
	SUB_CMD_FLP_PDR_UNRELIABLE_REQ,
	SUB_CMD_FLP_PDR_STEPCFG_REQ,

	/* tag ar */
	SUB_CMD_FLP_AR_START_REQ = 0x20,
	SUB_CMD_FLP_AR_CONFIG_REQ,
	SUB_CMD_FLP_AR_STOP_REQ,
	SUB_CMD_FLP_AR_UPDATE_REQ,
	SUB_CMD_FLP_AR_FLUSH_REQ,
	SUB_CMD_FLP_AR_GET_STATE_REQ,
	SUB_CMD_FLP_AR_SHMEM_STATE_REQ,
	SUB_CMD_CELL_INFO_DATA_REQ = 0x29,

	/* tag environment */
	SUB_CMD_ENVIRONMENT_INIT_REQ = 0x20,
	SUB_CMD_ENVIRONMENT_ENABLE_REQ,
	SUB_CMD_ENVIRONMENT_DISABLE_REQ,
	SUB_CMD_ENVIRONMENT_EXIT_REQ,
	SUB_CMD_ENVIRONMENT_DATABASE_REQ,
	SUB_CMD_ENVIRONMENT_GET_STATE_REQ,

	/* tag flp */
	SUB_CMD_FLP_START_BATCHING_REQ = 0x20,
	SUB_CMD_FLP_STOP_BATCHING_REQ,
	SUB_CMD_FLP_UPDATE_BATCHING_REQ,
	SUB_CMD_FLP_GET_BATCHED_LOCATION_REQ,
	SUB_CMD_FLP_FLUSH_LOCATION_REQ,
	SUB_CMD_FLP_INJECT_LOCATION_REQ,
	SUB_CMD_FLP_RESET_REQ,
	SUB_CMD_FLP_RESET_RESP,
	SUB_CMD_FLP_GET_BATCH_SIZE_REQ,
	SUB_CMD_FLP_BATCH_PUSH_GNSS_REQ,

	SUB_CMD_FLP_ADD_GEOF_REQ,
	SUB_CMD_FLP_REMOVE_GEOF_REQ,
	SUB_CMD_FLP_MODIFY_GEOF_REQ,
	SUB_CMD_FLP_LOCATION_UPDATE_REQ,
	SUB_CMD_FLP_GEOF_TRANSITION_REQ,
	SUB_CMD_FLP_GEOF_MONITOR_STATUS_REQ,

	SUB_CMD_FLP_GEOF_GET_TRANSITION_REQ,

	SUB_CMD_FLP_CELLFENCE_ADD_REQ,
	SUB_CMD_FLP_CELLFENCE_OPT_REQ,
	SUB_CMD_FLP_CELLFENCE_TRANSITION_REQ,
	SUB_CMD_FLP_CELLFENCE_INJECT_RESULT_REQ,

	SUB_CMD_FLP_CELLTRAJECTORY_CFG_REQ,
	SUB_CMD_FLP_CELLTRAJECTORY_REQUEST_REQ,
	SUB_CMD_FLP_CELLTRAJECTORY_REPORT_REQ,
	SUB_CMD_FLP_CELLDB_LOCATION_REPORT_REQ,

	SUB_CMD_FLP_COMMON_STOP_SERVICE_REQ,
	SUB_CMD_FLP_COMMON_WIFI_CFG_REQ,

	SUB_CMD_FLP_GEOF_GET_LOCATION_REQ,
	SUB_CMD_FLP_GEOF_GET_LOCATION_REPORT_REQ,
	SUB_CMD_FLP_ADD_WIFENCE_REQ,
	SUB_CMD_FLP_REMOVE_WIFENCE_REQ,
	SUB_CMD_FLP_PAUSE_WIFENCE_REQ,
	SUB_CMD_FLP_RESUME_WIFENCE_REQ,
	SUB_CMD_FLP_GET_WIFENCE_STATUS_REQ,
	SUB_CMD_FLP_WIFENCE_TRANSITION_REQ,
	SUB_CMD_FLP_WIFENCE_STATUS_REQ,
	SUB_CMD_FLP_COMMON_DEBUG_CONFIG_REQ,

	SUB_CMD_FLP_CELL_CELLBATCHING_CFG_REQ,
	SUB_CMD_FLP_CELL_CELLBATCHING_REQ,
	SUB_CMD_FLP_CELL_CELLBATCHING_REPORT_REQ,
	SUB_CMD_FLP_DIAG_SEND_CMD_REQ,
	SUB_CMD_FLP_DIAG_DATA_REPORT_REQ,
	SUB_CMD_FLP_BATCHING_MULT_LASTLOCATION_REQ,
	SUB_CMD_FLP_BATCHING_MULT_FLUSH_REQ,

	SUB_CMD_FLP_GEOF_GET_SIZE_REQ,
	SUB_CMD_FLP_GEOF_GET_SIZE_REPORT_REQ,
	SUB_CMD_FLP_CELLFENCE_GET_SIZE_REQ,
	SUB_CMD_FLP_CELLFENCE_GET_SIZE_REPORT_REQ,
	SUB_CMD_FLP_WIFENCE_GET_SIZE_REQ,
	SUB_CMD_FLP_WIFENCE_GET_SIZE_REPORT_REQ,

	/* Always On Display */
	SUB_CMD_AOD_START_REQ = 0x20,
	SUB_CMD_AOD_STOP_REQ,
	SUB_CMD_AOD_START_UPDATING_REQ,
	SUB_CMD_AOD_END_UPDATING_REQ,
	SUB_CMD_AOD_SET_TIME_REQ,
	SUB_CMD_AOD_SET_DISPLAY_SPACE_REQ,
	SUB_CMD_AOD_SETUP_REQ,
	SUB_CMD_AOD_DSS_ON_REQ,
	SUB_CMD_AOD_DSS_OFF_REQ,

	/* key */
	SUB_CMD_BACKLIGHT_REQ = 0x20,
	/* rpc */
	SUB_CMD_RPC_START_REQ = 0x20,
	SUB_CMD_RPC_STOP_REQ,
	SUB_CMD_RPC_UPDATE_REQ,
	SUB_CMD_RPC_LIBHAND_REQ,

	SUB_CMD_VIBRATOR_SINGLE_REQ = 0x20,
	SUB_CMD_VIBRATOR_REPEAT_REQ,
	SUB_CMD_VIBRATOR_ON_REQ,
	SUB_CMD_VIBRATOR_SET_AMPLITUDE_REQ,
	SUB_CMD_VIBRATOR_GEN_WAVE_TONE,
	SUB_CMD_VIBRATOR_PROBE,

	/* swing */
	SUB_CMD_SWING_LOAD_MODEL = 0x20,
	SUB_CMD_SWING_UNLOAD_MODEL,
	SUB_CMD_SWING_RUN_MODEL,
	SUB_CMD_SWING_GET_INFO,
	SUB_CMD_SWING_LIST_MODELS,
	SUB_CMD_SWING_DBG_ISR,
	SUB_CMD_SWING_FUSION_EN,
	SUB_CMD_SWING_ATOM_EN,
	SUB_CMD_SWING_FUSION_SET,
	SUB_CMD_SWING_ATOM_SET,
	SUB_CMD_SWING_FUSION_UPLOAD,

	/* swing cam */
	SUB_CMD_SWING_CAM_CONFIG = 0x20,
	SUB_CMD_SWING_CAM_CAPTURE,
	SUB_CMD_SWING_CAM_MATCH_ID,
	SUB_CMD_SWING_CAM_ACQUIRE,
	SUB_CMD_SWING_CAM_EXTEND,
	SUB_CMD_SWING_GET_OTP,

	/* swing debug */
	SUB_CMD_SWING_DBG_SET_BKPT = 0x20,
	SUB_CMD_SWING_DBG_RM_BKPT,
	SUB_CMD_SWING_DBG_SINGLE_STEP,
	SUB_CMD_SWING_DBG_SUSPEND,
	SUB_CMD_SWING_DBG_RESUME,
	SUB_CMD_SWING_DBG_READ,
	SUB_CMD_SWING_DBG_WRITE,
	SUB_CMD_SWING_DBG_SHOW_BKPTS,
	SUB_CMD_SWING_DBG_DUMP,
	SUB_CMD_SWING_DBG_MODEL,
	SUB_CMD_SWING_DBG_LIST_TASKS,
	SUB_CMD_SWING_DBG_RUN_BLAS,

	/* KB */
	SUB_CMD_KB_OPEN_REQ = 0x20,
	SUB_CMD_KB_OPEN_RESP,
	SUB_CMD_KB_CLOSE_REQ,
	SUB_CMD_KB_CLOSE_RESP,
	SUB_CMD_KB_REPORT_REQ,
	SUB_CMD_KB_REPORT_RESP,
	SUB_CMD_KB_EVENT_REQ,
	SUB_CMD_KB_EVENT_RESP,
	SUB_CMD_KB_HUB_MCU_READY,

	/* screen status send to sensorhub */
	SUB_CMD_SCREEN_STATUS = 0x20,

	/* thp */
	SUB_CMD_THP_OPEN_REQ = 0x20,
	SUB_CMD_THP_CLOSE_REQ,
	SUB_CMD_THP_DEBUG_REQ,
	SUB_CMD_THP_CONFIG_REQ,
	SUB_CMD_THP_STATUS_REQ,

	// ps
	SUB_CMD_PS_RCV_STATUS_REQ = 0x20,

#ifdef CONFIG_CONTEXTHUB_WATCH_FACTORY
	/* factory */
	SUB_CMD_FACTORY_ACC_CHIP_ID = 0x60,
	SUB_CMD_FACTORY_ACC_TEST_INT1,
	SUB_CMD_FACTORY_ACC_TEST_INT2,
	SUB_CMD_FACTORY_ACC_SET_MODE,
	SUB_CMD_FACTORY_ACC_GET_MODE,
	SUB_CMD_FACTORY_ACC_SET_ODR,
	SUB_CMD_FACTORY_ACC_GET_ODR,
	SUB_CMD_FACTORY_GYRO_SET_MODE,
	SUB_CMD_FACTORY_GYRO_GET_MODE,
	SUB_CMD_FACTORY_GYRO_SET_ODR,
	SUB_CMD_FACTORY_GYRO_GET_ODR,
	SUB_CMD_FACTORY_CAP_CALIB,
	SUB_CMD_FACTORY_CAP_ERASE,
	SUB_CMD_FACTORY_CAP_CHIP_ID,
	SUB_CMD_FACTORY_CAP_GET_DATA,
	SUB_CMD_FACTORY_CAP_GET_DATA_BRD,
	SUB_CMD_FACTORY_CAP_CMP_PARAM,
	SUB_CMD_SAVE_ACC_CALIBRATION,
	SUB_CMD_SAVE_GYRO_CALIBRATION,
	SUB_CMD_FACTORY_CAP_SET_MODE,
	SUB_CMD_FACTORY_CAP_GET_MODE,
#endif

	SUB_CMD_MAX = 0xff,
} obj_sub_cmd_t;

#endif
#endif

#endif
