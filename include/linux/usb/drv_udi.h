
#ifndef __DRV_UDI_H__
#define __DRV_UDI_H__

#define UDI_BUILD_DEV_ID(dev, type) (((dev) << 8) | ((type) & 0x00ff))

/* main device define */
typedef enum tagUDI_DEVICE_MAIN_ID {
	UDI_DEV_USB_ACM = 0,
	UDI_DEV_USB_NCM,
	UDI_DEV_ICC,
	UDI_DEV_UART,
	UDI_DEV_HSUART,
	UDI_DEV_MAX
} UDI_DEVICE_MAIN_ID;

/* device type defitnaion */
/* ACM */
typedef enum tagUDI_ACM_DEV_TYPE {
	UDI_USB_ACM_CTRL,
	UDI_USB_ACM_AT,
	UDI_USB_ACM_SHELL,
	UDI_USB_ACM_LTE_DIAG,
	UDI_USB_ACM_OM,
	UDI_USB_ACM_MODEM,
	UDI_USB_ACM_GPS,	/* HISO */
	UDI_USB_ACM_3G_GPS,	/* ashell */
	UDI_USB_ACM_3G_PCVOICE,	/* reserved */
	UDI_USB_ACM_PCVOICE,	/* reserved */
	UDI_USB_ACM_SKYTONE,
	UDI_USB_ACM_CDMA_LOG,
	UDI_USB_ACM_MAX
} UDI_ACM_DEV_TYPE;

/* device ID defination */
typedef enum tagUDI_DEVICE_ID {
	/* USB ACM */
	UDI_ACM_CTRL_ID		= UDI_BUILD_DEV_ID(UDI_DEV_USB_ACM, UDI_USB_ACM_CTRL),
	UDI_ACM_AT_ID		= UDI_BUILD_DEV_ID(UDI_DEV_USB_ACM, UDI_USB_ACM_AT),
	UDI_ACM_SHELL_ID	= UDI_BUILD_DEV_ID(UDI_DEV_USB_ACM, UDI_USB_ACM_SHELL),
	UDI_ACM_LTE_DIAG_ID	= UDI_BUILD_DEV_ID(UDI_DEV_USB_ACM, UDI_USB_ACM_LTE_DIAG),
	UDI_ACM_OM_ID		= UDI_BUILD_DEV_ID(UDI_DEV_USB_ACM, UDI_USB_ACM_OM),
	UDI_ACM_MODEM_ID	= UDI_BUILD_DEV_ID(UDI_DEV_USB_ACM, UDI_USB_ACM_MODEM),
	UDI_ACM_GPS_ID		= UDI_BUILD_DEV_ID(UDI_DEV_USB_ACM, UDI_USB_ACM_GPS),     /* HISO */
	UDI_ACM_3G_GPS_ID	= UDI_BUILD_DEV_ID(UDI_DEV_USB_ACM, UDI_USB_ACM_3G_GPS),  /* ashell */
	UDI_ACM_3G_PCVOICE_ID	= UDI_BUILD_DEV_ID(UDI_DEV_USB_ACM, UDI_USB_ACM_3G_PCVOICE), /* reserved */
	UDI_ACM_PCVOICE_ID	= UDI_BUILD_DEV_ID(UDI_DEV_USB_ACM, UDI_USB_ACM_PCVOICE),    /* reseervd */
	UDI_ACM_SKYTONE_ID	= UDI_BUILD_DEV_ID(UDI_DEV_USB_ACM, UDI_USB_ACM_SKYTONE),
	UDI_ACM_CDMA_LOG_ID	= UDI_BUILD_DEV_ID(UDI_DEV_USB_ACM, UDI_USB_ACM_CDMA_LOG),

	/* MUST BE LAST */
	UDI_INVAL_DEV_ID	= 0xFFFF
} UDI_DEVICE_ID;

/* param of open */
typedef struct tagUDI_OPEN_PARAM {
	UDI_DEVICE_ID	devid;		/* device ID */
	void		*pPrivate;	/* device private data */
} UDI_OPEN_PARAM;

/* IOCTL command code */
typedef enum tagUDI_IOCTL_CMD_TYPE {
	UDI_IOCTL_SET_WRITE_CB = 0xF001, /* start at 0xF001, avoid conflict */
	UDI_IOCTL_SET_READ_CB,
	UDI_IOCTL_INVAL_CMD = 0xFFFFFFFF
} UDI_IOCTL_CMD_TYPE;

#endif
