#
# Hisi enhanced options for sched walt
#

if SCHED_WALT

config SCHED_HISI_WALT_WINDOW_SIZE_TUNABLE
	bool "Make WALT window size tunable"
	default n
	help
	  Make walt_ravg_window tunable in early param.

config SCHED_HISI_DOWNMIGRATE_LOWER_LOAD
	bool "Schedutil governor use lower load when task downmigrate"
	depends on CPU_FREQ_GOV_SCHEDUTIL
	default n
	help
	  Schedutil governor migrate cpu busy time when task migrate. This
	  option will recaculate a lower load for task downmigrate to
	  prevent little core's frequency increase too much.

config SCHED_HISI_CALC_CUM_WINDOW_DEMAND
	bool "WALT calculate cum window demand"
	depends on SCHED_HISI_USE_WALT
	default n
	help
	  This option caculates WALT's cum_window_demand, which is not used
	  currently.

config SCHED_HISI_CHECK_IRQLOAD
	bool "Scheduler check irqload when select task's cpu"
	default y
	help
	  WALT caculates an irqload for each cpu and scheduler will avoid
	  placing task on a high irqload cpu (if WALT enabled).
	  Default disabled because we haven't tested to find out which
	  threshold is the best.

config SCHED_HISI_TOP_TASK
	bool "Maintain the top task load of each cpu"
	default y
	help
	  Hisi schedutil governor may use the top task load as a guide to
	  frequency evaluation.

config SCHED_HISI_USE_WALT
	bool "Scheduler use WALT for cpu util and task util"
	default y
	help
	  This option enables calculation of WALT's task_util/cpu_util
	  signal, and sets sysctl_sched_use_walt_[cpu/task]_util to 1.

	  When enabled, you can still change the sysctl node to
	  enable or disable walt signal for debug purpose.

config SCHED_HISI_MIGRATE_SPREAD_LOAD
	bool "Spread task's load when inter-cluster migration"
	default y
	help
	  In inter-cluster migration, this option will spread task's
	  prev_window/curr_window to all cpus that the task has been
	  running on before in a window. If disabled, task's whole load
	  will move to dest cpu and that will make dest cpu's cpu load
	  very high in same cases.

config SCHED_HISI_TOP_TASK_SKIP_HISPEED_LOGIC
	bool "Let top task ignore above_hipeed_delay"
	depends on SCHED_HISI_TOP_TASK
	default y
	help
	  For schedutil governor, this option skips hispeed logic when
	  ADD_TOP_TASK event triggers freq update.

config SCHED_HISI_RUNNING_TASK_ROTATION
	bool "Rotate running tasks between clusters"
	default y
	depends on HISI_EAS_SCHED
	depends on HISI_CORE_CTRL
	depends on HISI_ED_TASK && !HISI_ED_TASK_RESET_AT_UPMIGRATION
	help
	  When there are 8 big tasks running parallelly, e.g. geekbench
	  multicore, tasks which were initially run on big cores will
	  finish its job very soon and then there will be 6 or less tasks
	  left.
	  Rotate the tasks, or in other words exchange them between
	  little cores and big cores randomly, will improve fairness and
	  parallelism.

config SCHED_HISI_PRED_LOAD
	bool "Calculate predicted load for each task"
	default y
	depends on HISI_CPU_FREQ_GOV_SCHEDUTIL
	help
	  Another signal to improve schedutil. This will help to ramp up
	  cpufreq quickly.
	  To enable this signal, say yes here and set predl_enable to 1
	  in init rc.

endif # SCHED_WALT

config SCHED_HISI_DEBUG_TRACE
	bool "Detailed trace for EAS debug"
	default n
	help
	  This option enable detailed tracepoint for EAS debug, there
	  will be more tracepoint in find best target, load balance and
	  energy diff.

config SCHED_HISI_VIP
	bool "Support a high prio sched policy in fair sched class"
	default y
	depends on HISI_EAS_SCHED

config SCHED_HISI_TASK_MIN_UTIL
	bool "Support boosting a task to a specified opp"
	default y
	depends on SCHED_HISI_TASK_UTIL_CLAMP

config SCHED_HISI_UTIL_CLAMP
	bool "Support userspace constraints on a task's min/max opp use"
	default y
	depends on HISI_CPU_FREQ_GOV_SCHEDUTIL
	depends on HISI_EAS_SCHED
	depends on SCHED_WALT
	select SCHED_HISI_TASK_MIN_UTIL

config SCHED_HISI_DEPRECATED
	bool "Hisi sched optimization deprecated code"
	default n
	help
	  Due to old platforms still alive, these code can't be deleted now.
	  They have been deprecated in the new platform.

	  Hisilicon new platform, say no. If unsure, say Y.

config SCHED_HISI_STAT_YIELD
	bool "Report task's cumulative_yield_time"
	depends on HISI_PERF_CTRL
	default n

config SCHED_HISI_FRAME_NO_FORCE_FAST_DOWN
	bool "Schedutil frame_update do not force skip_min_sample_time"
	depends on !SCHED_HISI_DEPRECATED
	default y
	help
	  Boosted scene like appstart do not want cpu to fast ramp
	  down. Frame sched should not break it. This option won't
	  set skip_min_sample_time for freq update marked by
	  sched_set_group_normalized_util() if userspace has
	  configured fast_ramp_down to 0.
	  Please say Y.
